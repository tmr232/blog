<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Categories on tamir.dev</title><link>https://blog.tamir.dev/categories/</link><description>Recent content in Categories on tamir.dev</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright &amp;copy; 2021 - Tamir Bahar</copyright><lastBuildDate>Fri, 10 Mar 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.tamir.dev/categories/index.xml" rel="self" type="application/rss+xml"/><item><title>Goats in the command line</title><link>https://blog.tamir.dev/posts/goat-codegen-initial/</link><pubDate>Thu, 02 Jun 2022 00:00:00 +0000</pubDate><guid>https://blog.tamir.dev/posts/goat-codegen-initial/</guid><description>&lt;p>This is more of a sharing-my-thoughts or work-in-progress post than a technical tutorial, so be warned 😉&lt;/p>&lt;h2 id="motivation">Motivation&lt;/h2>&lt;p>As a Python programmer, I get to experience the joy of using &lt;a href="https://typer.tiangolo.com/">Typer&lt;/a> when creating CLI tools.&lt;/p>&lt;p>It allows for zero-boilerplate CLI apps using type annotations:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> typer&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">app&lt;/span>(name:str, goodbye:bool&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">False&lt;/span>): &lt;span style="color:#66d9ef">if&lt;/span> goodbye: print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Goodbye, &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>name&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">.&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">else&lt;/span>: print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Hello, &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>name&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">!&amp;#34;&lt;/span>)&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(): typer&lt;span style="color:#f92672">.&lt;/span>run(app) &lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;__main__&amp;#39;&lt;/span>: main()&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, when I run it:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ python app.py --helpUsage: app.py &lt;span style="color:#f92672">[&lt;/span>OPTIONS&lt;span style="color:#f92672">]&lt;/span> NAMEArguments: NAME &lt;span style="color:#f92672">[&lt;/span>required&lt;span style="color:#f92672">]&lt;/span>Options: --goodbye / --no-goodbye &lt;span style="color:#f92672">[&lt;/span>default: no-goodbye&lt;span style="color:#f92672">]&lt;/span> --install-completion &lt;span style="color:#f92672">[&lt;/span>bash|zsh|fish|powershell|pwsh&lt;span style="color:#f92672">]&lt;/span> Install completion &lt;span style="color:#66d9ef">for&lt;/span> the specified shell. --show-completion &lt;span style="color:#f92672">[&lt;/span>bash|zsh|fish|powershell|pwsh&lt;span style="color:#f92672">]&lt;/span> Show completion &lt;span style="color:#66d9ef">for&lt;/span> the specified shell, to copy it or customize the installation. --help Show this message and exit.&lt;/code>&lt;/pre>&lt;/div>&lt;p>As far as I&amp;rsquo;m concerned, this is absolutely amazing.&lt;/p>&lt;p>I already use type annotations quite often, so &lt;a href="https://typer.tiangolo.com/">Typer&lt;/a> is literally zero boilerplate.&lt;/p>&lt;p>In Go, however, the situation is more involved.&lt;/p>&lt;p>There are multiple flag parsing libraries (&lt;a href="https://pkg.go.dev/flag">flag&lt;/a>, &lt;a href="https://cobra.dev/">Cobra&lt;/a>, &lt;a href="https://cli.urfave.org/">urfave/cli&lt;/a>), but all of them require some extra code for things to work.&lt;/p>&lt;p>You need to define your flags, at the very least.&lt;/p>&lt;p>They are great libraries.&lt;/p>&lt;p>But coming from Python - I want more. Or less, depending on how you look at it.&lt;/p>&lt;p>I want the following to just work:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">app&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">goodbye&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>) {&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">goodbye&lt;/span> {&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Goodbye, %s.\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>)} &lt;span style="color:#66d9ef">else&lt;/span> {&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hello, %s!\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>)}}&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {&lt;span style="color:#a6e22e">goat&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#a6e22e">app&lt;/span>)}&lt;/code>&lt;/pre>&lt;/div>&lt;p>And&amp;hellip; Now it does.&lt;/p>&lt;h2 id="goat-">Goat 🐐&lt;/h2>&lt;p>&lt;a href="https://github.com/tmr232/goat">Goat&lt;/a>, or &lt;strong>Go&lt;/strong> &lt;strong>A&lt;/strong>pproximation of &lt;strong>T&lt;/strong>yper, is my work-in-progress very-experimental solution to that!&lt;/p>&lt;p>With goat, the code in the sample above &lt;em>works&lt;/em>. Well, as long as you add a &lt;code>//go:generate&lt;/code> line to it 😉&lt;/p>&lt;p>You see, Go doesn&amp;rsquo;t want you doing crazy things at compile time, or using runtime reflection,&lt;/p>&lt;p>or at any place where it&amp;rsquo;s hard for the user to look at the code and see what it actually does.&lt;/p>&lt;p>That&amp;rsquo;s great and all, but we &lt;em>want&lt;/em> to create hacky don&amp;rsquo;t-look-behind-the-curtain code.&lt;/p>&lt;p>So, with Go being Go, we use code generation.&lt;/p>&lt;h2 id="handwritten">Handwritten&lt;/h2>&lt;p>Before we can generate code - we need to know what to generate.&lt;/p>&lt;p>In our case (as I said - it&amp;rsquo;s a work in progress, so we&amp;rsquo;re being quite specific&amp;hellip;) we need the following:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">app&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">goodbye&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>) {&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">goodbye&lt;/span> {&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Goodbye, %s.\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>)} &lt;span style="color:#66d9ef">else&lt;/span> {&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hello, %s!\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>)}}&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">appWrapper&lt;/span>() { &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">goodbye&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#a6e22e">__goatApp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">cli&lt;/span>.&lt;span style="color:#a6e22e">App&lt;/span>{ &lt;span style="color:#a6e22e">Flags&lt;/span>: []&lt;span style="color:#a6e22e">cli&lt;/span>.&lt;span style="color:#a6e22e">Flag&lt;/span>{ &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">cli&lt;/span>.&lt;span style="color:#a6e22e">StringFlag&lt;/span>{ &lt;span style="color:#a6e22e">Name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">Destination&lt;/span>: &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span>, &lt;span style="color:#a6e22e">Required&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>, }, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">cli&lt;/span>.&lt;span style="color:#a6e22e">BoolFlag&lt;/span>{ &lt;span style="color:#a6e22e">Name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;goodbye&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">Destination&lt;/span>: &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">goodbye&lt;/span>, }, }, &lt;span style="color:#a6e22e">Action&lt;/span>: &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">cli&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) { &lt;span style="color:#a6e22e">app&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>, &lt;span style="color:#a6e22e">goodbye&lt;/span>) }, } &lt;span style="color:#a6e22e">__err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">__goatApp&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Args&lt;/span>) &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">__err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> { &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatal&lt;/span>(&lt;span style="color:#a6e22e">__err&lt;/span>) }}&lt;/code>&lt;/pre>&lt;/div>&lt;p>(here we&amp;rsquo;re using &lt;a href="https://cli.urfave.org/">urfave/cli&lt;/a> because it&amp;rsquo;s the one I&amp;rsquo;m most familiar with, and because it doesn&amp;rsquo;t use globals.)&lt;/p>&lt;h2 id="generation">Generation&lt;/h2>&lt;p>To generate the code, we use the &lt;a href="https://pkg.go.dev/golang.org/x/tools/go/packages">packages&lt;/a> package.&lt;/p>&lt;p>It is the easiest interface I know to parsing complete packages and getting the relevant type information.&lt;/p>&lt;p>That, in turn, allows us to get the argument information and generate the code.&lt;/p>&lt;p>&lt;code>bool&lt;/code> parameters become Boolean flags, &lt;code>string&lt;/code> parameters become string flags, and so on.&lt;/p>&lt;p>To know which is the relevant &amp;ldquo;app&amp;rdquo;, we check the call to &lt;code>goat.Run&lt;/code>.&lt;/p>&lt;p>The code can be a bit tricky, but the logic is very straightforward.&lt;/p>&lt;p>As for the physical location of the code - we create a new file in the same package (read: directory) and go handles the rest for us, as long as there are no naming conflicts.&lt;/p>&lt;p>Only one issue remains - how to connect the &lt;code>goat.Run&lt;/code> call to the &lt;code>appWrapper&lt;/code> function.&lt;/p>&lt;h2 id="plumbing">Plumbing&lt;/h2>&lt;p>We currently have 3 building blocks:&lt;/p>&lt;ol>&lt;li>&lt;code>func app(string, bool)&lt;/code>, our application function&lt;/li>&lt;li>&lt;code>func appWrapper()&lt;/code>, our generated wrapper function, using the flag parsing library&lt;/li>&lt;li>&lt;code>func main()&lt;/code>, our program&amp;rsquo;s entrypoint, calling &lt;code>goat.Run(app)&lt;/code>.&lt;/li>&lt;/ol>&lt;p>We need to make &lt;code>goat.Run(app)&lt;/code> call &lt;code>appWrapper&lt;/code> instead, somehow.&lt;/p>&lt;p>The problem being - our &lt;code>goat&lt;/code> package (where the &lt;code>goat.Run&lt;/code> method is defined) does not know about &lt;code>appWrapper&lt;/code>.&lt;/p>&lt;p>To fix that, we&amp;rsquo;ll introduce them.&lt;/p>&lt;p>To do that, we&amp;rsquo;ll have our app register &lt;code>appWrapper&lt;/code> as the wrapper for &lt;code>app&lt;/code> &lt;em>before&lt;/em> running &lt;code>func main()&lt;/code>.&lt;/p>&lt;p>Luckily for us, Go allows for dynamic initialization using &lt;code>func init()&lt;/code>.&lt;/p>&lt;p>&lt;code>init()&lt;/code> is a special function. You can define as many as you want, and they run during initialization.&lt;/p>&lt;p>That is, before &lt;code>func main()&lt;/code>.&lt;/p>&lt;p>Our generated &lt;code>init&lt;/code> is as follows:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">init&lt;/span>() { &lt;span style="color:#a6e22e">goat&lt;/span>.&lt;span style="color:#a6e22e">Register&lt;/span>(&lt;span style="color:#a6e22e">app&lt;/span>, &lt;span style="color:#a6e22e">appWrapper&lt;/span>)}&lt;/code>&lt;/pre>&lt;/div>&lt;p>And that&amp;rsquo;s it.&lt;/p>&lt;p>Our &lt;code>goat&lt;/code> package is super simple as well:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// This is our registry - mapping functions to their wrappers&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">registry&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#a6e22e">reflect&lt;/span>.&lt;span style="color:#a6e22e">Value&lt;/span>]&lt;span style="color:#66d9ef">func&lt;/span>()&lt;span style="color:#75715e">// We initialize it to an empty map, to prevent our code from crashing&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">init&lt;/span>() { &lt;span style="color:#a6e22e">registry&lt;/span> = make(&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#a6e22e">reflect&lt;/span>.&lt;span style="color:#a6e22e">Value&lt;/span>]&lt;span style="color:#66d9ef">func&lt;/span>())}&lt;span style="color:#75715e">// Register wrappers using the register function&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Register&lt;/span>(&lt;span style="color:#a6e22e">app&lt;/span> &lt;span style="color:#a6e22e">any&lt;/span>, &lt;span style="color:#a6e22e">wrapper&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>()) { &lt;span style="color:#a6e22e">registry&lt;/span>[&lt;span style="color:#a6e22e">reflect&lt;/span>.&lt;span style="color:#a6e22e">ValueOf&lt;/span>(&lt;span style="color:#a6e22e">app&lt;/span>)] = &lt;span style="color:#a6e22e">wrapper&lt;/span>}&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#a6e22e">any&lt;/span>) { &lt;span style="color:#75715e">// All that `goat.Run` has to do is lookup the wrapper and call it&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">registry&lt;/span>[&lt;span style="color:#a6e22e">reflect&lt;/span>.&lt;span style="color:#a6e22e">ValueOf&lt;/span>(&lt;span style="color:#a6e22e">f&lt;/span>)]()}&lt;/code>&lt;/pre>&lt;/div>&lt;p>As for the &lt;code>reflect.ValueOf&lt;/code> calls - functions in Go are not hashable, and cannot be used as map keys (that&amp;rsquo;s a sensible choice).&lt;/p>&lt;p>That said, we &lt;em>need&lt;/em> to hash them. So as a workaround, we use reflection to query the value of the function.&lt;/p>&lt;p>&lt;code>reflect.Value&lt;/code> objects &lt;em>are&lt;/em> hashable, so it all works out in the end.&lt;/p>&lt;h2 id="try-it-yourself">Try It Yourself&lt;/h2>&lt;p>The code is online at &lt;a href="https://github.com/tmr232/goat">tmr232/goat&lt;/a>.&lt;/p>&lt;p>But, again, it is a work-in-progress and very experimental. It might break or change at any moment.&lt;/p></description></item><item><title>More Memory Profiling (in Python)</title><link>https://blog.tamir.dev/posts/more-memory-profiling-in-python/</link><pubDate>Fri, 02 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.tamir.dev/posts/more-memory-profiling-in-python/</guid><description>&lt;h2 id="tldr">TL;DR&lt;/h2>&lt;p>Graph memory-usage over time, correlate with logs, profit.&lt;/p>&lt;h2 id="overconfidence">Overconfidence&lt;/h2>&lt;p>Recently, I had to reduce the memory consumption of a Python process that became entirely unreasonable. Now, a while back I wrote about &lt;a href="https://blog.tamir.dev/posts/finding-a-memory-leak-in-my-python-code">finding memory leaks in Python&lt;/a>. I was pleased with myself and sure that with the knowledge I gained then, I can surely get this done!&lt;/p>&lt;p>And oh, was I wrong&amp;hellip;&lt;/p>&lt;h2 id="harsh-reality">Harsh Reality&lt;/h2>&lt;p>You see, both &lt;a href="https://pympler.readthedocs.io/en/latest/">pympler&lt;/a> and &lt;a href="https://docs.python.org/3/library/tracemalloc.html">tracemalloc&lt;/a> are wonderful tools. But like all tools, they have limitations. When you have a long-running (days) process with many (hundreds of millions) objects, the memory and performance costs of your tools add up quite significantly. Waiting for &lt;code>pympler&lt;/code> to query &lt;em>all objects&lt;/em> takes forever, and following references is completely impractical; viewing &lt;code>tracemalloc&lt;/code> statistics is nice, but doesn&amp;rsquo;t help you narrow things down enough.&lt;/p>&lt;p>So, after 2 weeks of zero-to-minimal improvements (though I was &lt;em>sure&lt;/em> I&amp;rsquo;m on the right track) I decided to try a different approach to understanding the memory usage of my code.&lt;/p>&lt;h2 id="to-the-rescue">To The Rescue&lt;/h2>&lt;p>Enter &lt;a href="https://gist.github.com/tmr232/4a10e17ddf4aefcc0c94a15bdddc58f4">memlog.py&lt;/a>.&lt;/p>&lt;p>&lt;code>memlog&lt;/code> is a simple, naive tool. It tracks the overall memory usage on a machine, and logs it (with a timestamp) to a CSV. That&amp;rsquo;s it. While the recorded data may include significant noise, running your code (&amp;amp; &lt;code>memlog&lt;/code>) inside a container can reduce it significantly. Also, background memory noise tends to be insignificant when your process hogging all of your memory&amp;hellip;&lt;/p>&lt;p>So, I ran my process (with logs), ran &lt;code>memlog&lt;/code>, and plotted a memory-over-time graph:&lt;img src="https://blog.tamir.dev/images/more-memory-profiling.png" alt="The image shows a graph of memory-usage over time. The graph shows a near-instant 4.5-unit rise at the start, then a slow 2-unit rise over a long time, then a near-instant decline back to 0 at the end.">&lt;/p>&lt;p>And oh, oh no.&lt;/p>&lt;h2 id="insight">Insight&lt;/h2>&lt;p>Looking at the graph, we can divide it into 3 parts:&lt;/p>&lt;ol>&lt;li>A near-instant rise at the beginning. This is by far the bulk of the memory-usage increase;&lt;/li>&lt;li>A slow, gradual increase over the entire time-scale;&lt;/li>&lt;li>A near-instant drop in memory-usage.&lt;/li>&lt;/ol>&lt;p>Those parts are basically:&lt;/p>&lt;ol>&lt;li>Loading the data-set and various initialization;&lt;/li>&lt;li>The bulk of the processing;&lt;/li>&lt;li>Program termination.&lt;/li>&lt;/ol>&lt;p>And for the past 2 weeks I&amp;rsquo;ve been busy reducing the memory-usage of&amp;hellip; the second part. Being absolutely sure it&amp;rsquo;s the most significant.&lt;/p>&lt;p>So yeah, that hurt. But only for a short time. For you see, with this newfound knowledge I could safely focus on the first few minutes of execution and disregard the rest for the time being.&lt;/p>&lt;p>True. I&amp;rsquo;ll have to test the whole thing once I&amp;rsquo;m make any significant changes. Memory-usage might spike at a later point. Memory-optimization may cause performance degradation. But unless I reduce that uptick at the beginning I won&amp;rsquo;t get any significant improvements.&lt;/p>&lt;h2 id="profit">Profit&lt;/h2>&lt;p>A week later, we managed to reduce memory-usage by 30% while &lt;em>reducing&lt;/em> overall processing time by a similar percentage. We had to:&lt;/p>&lt;ol>&lt;li>Add a de-duplicating weakref based cache;&lt;/li>&lt;li>Add a pre-processing step;&lt;/li>&lt;li>Make our code more cache-friendly by sorting our data;&lt;/li>&lt;li>Remove a massively over-engineered control mechanism.&lt;/li>&lt;/ol>&lt;p>But it was all made possible by &lt;em>focusing on the right part&lt;/em>. Had I not plotted that memory graph, I could&amp;rsquo;ve easily spent another 2 weeks without any significant progress.&lt;/p>&lt;h1 id="old--wise">Old &amp;amp; Wise&lt;/h1>&lt;p>So whatever you do, I highly suggest you graph your data. No need to be smart about it. Log it, graph it, correlate to your logs.&lt;/p></description></item><item><title>GitLab CI Tricks</title><link>https://blog.tamir.dev/posts/gitlab-ci-tricks/</link><pubDate>Wed, 10 Mar 2021 00:00:00 +0000</pubDate><guid>https://blog.tamir.dev/posts/gitlab-ci-tricks/</guid><description>&lt;p>In writing our CI setup at Vdoo, we came across some interesting challenges. Having solved them and used the solutions for quite a while, we decided it is best to share, and hopefully save others some time and effort solving similar problems.&lt;/p>&lt;p>Of course, there are alternative solutions to the challenges we have dealt with, and some solutions are probably superior to ours. We are happy to hear about such solutions and to improve our own.&lt;/p>&lt;p>As for the code presented in this post - it was extracted from our CI and cleaned up a bit. As such, it is missing some necessary boilerplate. It will not work as-is, and some work will be required to adapt it to your CI. That said, it should clearly lay out the solutions. (You can think of it as slide-ware.)&lt;/p>&lt;h2 id="lfs-check">LFS-Check&lt;/h2>&lt;p>All transitions can be bumpy. For us, the transition from storing binary files as regular git blobs to storing them using LFS was one such bumpy transition.&lt;/p>&lt;p>We made sure to include all the LFS-relevant files &amp;amp; patterns in a .gitattributes file, but ensuring everyone (including people who only occasionally work on the relevant repo) properly setup their environments for LFS took some time. In the mean-time, we kept getting files that should be in LFS committed and pushed as regular files in Merge-Requests.&lt;/p>&lt;p>To circumvent that, we set up a simple check at the start of our CI process to ensure all relevant files are indeed stored in LFS.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">lfs-check&lt;/span>: &lt;span style="color:#f92672">only&lt;/span>: &lt;span style="color:#f92672">refs&lt;/span>: - &lt;span style="color:#ae81ff">merge_requests&lt;/span> &lt;span style="color:#f92672">script&lt;/span>: - &lt;span style="color:#ae81ff">git lfs install&lt;/span> - &lt;span style="color:#ae81ff">git add --renormalize -u&lt;/span> - |&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74"> if ! git diff --cached --name-only --exit-code ; then&lt;/span>&lt;span style="color:#e6db74"> echo&lt;/span>&lt;span style="color:#e6db74"> echo&lt;/span>&lt;span style="color:#e6db74"> echo &amp;#34;==============================&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> echo &amp;#34;# Please renormalize files #&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> echo &amp;#34;==============================&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> echo&lt;/span>&lt;span style="color:#e6db74"> echo &amp;#34;git add -u --renormalize&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> echo &amp;#34;git commit --amend&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> exit 1&lt;/span>&lt;span style="color:#e6db74"> fi&lt;/span> &lt;/code>&lt;/pre>&lt;/div>&lt;p>When people pushed the files the wrong way - the CI would fail with an informative error and instructions.&lt;/p>&lt;h2 id="required-commit">Required Commit&lt;/h2>&lt;p>Every so often a change is made to the code, rendering the code before the change unworkable or irrelevant. This can happen for many reasons. Here are some examples:&lt;/p>&lt;ol>&lt;li>A bug was fixed in the CI. This is all too common when forgetting to properly lock your dependencies (including recursive ones!)&lt;/li>&lt;li>A very time-consuming update was made (re-training an ML model, anyone?)&lt;/li>&lt;li>The change is significant and will make rebasing a pain&lt;/li>&lt;li>A significant bug was fixed, making tests on the previous versions mostly irrelevant&lt;/li>&lt;/ol>&lt;p>Once you introduce such a change to your code, you want people to know about it, and you want to stop wasting cycles on it.&lt;/p>&lt;p>To achieve this goal, we created a required-commit mechanism in our CI. For the CI to work, the required-commit must be an ancestor of the current commit. If it isn&amp;rsquo;t - the CI fails with a descriptive error &amp;amp; instructions for fixing the issue.&lt;/p>&lt;p>Once we have a new required-commit, we inform all developers in a dedicated Slack channel and update the CI to match. This ensures that even if a developer misses the notification on Slack, the CI will let them know what needs to be done.&lt;/p>&lt;p>The solution consists of a simple CI job:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">required-commit&lt;/span>: &lt;span style="color:#f92672">only&lt;/span>: &lt;span style="color:#f92672">refs&lt;/span>: - &lt;span style="color:#ae81ff">merge_requests&lt;/span> &lt;span style="color:#f92672">script&lt;/span>: - &lt;span style="color:#ae81ff">apt-get update&lt;/span> - |&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74"> if ! git merge-base --is-ancestor ${REQUIRED_COMMIT:-HEAD} HEAD ; then&lt;/span>&lt;span style="color:#e6db74"> echo&lt;/span>&lt;span style="color:#e6db74"> echo&lt;/span>&lt;span style="color:#e6db74"> echo &amp;#34;=============================&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> echo &amp;#34;# Rebase Required #&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> echo &amp;#34;=============================&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> echo&lt;/span>&lt;span style="color:#e6db74"> echo &amp;#34;Your base commit is out of date.&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> echo &amp;#34;Please update to ${REQUIRED_COMMIT} or later.&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> echo &amp;#34;The easiest fix is to rebase-onto or merge-from origin/main.&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> echo&lt;/span>&lt;span style="color:#e6db74"> echo&lt;/span>&lt;span style="color:#e6db74"> exit 1&lt;/span>&lt;span style="color:#e6db74"> fi&lt;/span> &lt;/code>&lt;/pre>&lt;/div>&lt;p>And a custom variable defined in the CI settings (see &lt;a href="https://docs.gitlab.com/ee/ci/variables/#create-a-custom-variable-in-the-ui">Create a custom variable in the UI&lt;/a>):&lt;/p>&lt;p>&lt;img src="https://blog.tamir.dev/images/gitlab-ci-tricks.png" alt="alt text">&lt;/p>&lt;h2 id="conditionally-building-job-docker-images">Conditionally Building Job Docker Images&lt;/h2>&lt;p>Some of our code is deployed via Docker images. As such - we want our CI to build and test those images. Some tests require running a Docker container and communicating with it, but some tests (especially unit- and integration-tests) are easier to run inside the said containers. To accommodate the latter, we use our Docker images as the base images for the CI test jobs.&lt;/p>&lt;p>This is easy enough to do in the CI. In our case, however, building the Docker images takes a very long time. In trying to reduce this time, we split our build into two parts. The first - a long compilation phase, building some rarely-changing code; the second - installation of our fast-changing Python code &amp;amp; all relevant dependencies.&lt;/p>&lt;p>Noticing the split between the fast-changing and rarely-changing parts of our build, we decided to split it in half, only building the first part when there&amp;rsquo;s an actual change to it.&lt;/p>&lt;p>To do that, however, we have to conditionally build the Docker image for the first half, and in the second half use either the preexisting first half or the newly built one.&lt;/p>&lt;h3 id="the-solution---build-proxy-promote">The Solution - Build, Proxy, Promote&lt;/h3>&lt;p>Our solution uses a model consisting of multiple CI jobs handling different parts.&lt;/p>&lt;ol>&lt;li>&lt;strong>Build&lt;/strong> jobs - responsible for building docker images. Either conditionally (for the first part) or consistently (for the second part).&lt;/li>&lt;li>&lt;strong>Proxy&lt;/strong> jobs - responsible for handling the conditional nature of the build jobs, providing the next job with the relevant tag for the Docker images - either &lt;code>:latest&lt;/code> or the current commit.&lt;/li>&lt;li>&lt;strong>Promote&lt;/strong> jobs - responsible for tagging the newly built images with &lt;code>:latest&lt;/code> and pushing them. They run last.&lt;/li>&lt;/ol>&lt;p>For our use-case, we used the following setup:&lt;/p>&lt;ol>&lt;li>Conditional &lt;strong>Build&lt;/strong> job to build the rarely-changing code&lt;/li>&lt;li>&lt;strong>Proxy&lt;/strong> job to yield the relevant tags&lt;/li>&lt;li>&lt;strong>Build&lt;/strong> job to build &amp;amp; install the fast-changing code&lt;/li>&lt;li>&lt;strong>Test&lt;/strong> job, to test the newly build code&lt;/li>&lt;li>&lt;strong>Promote&lt;/strong> job, pushing the newly build images as &lt;code>:latest&lt;/code> if the tests passed&lt;/li>&lt;/ol>&lt;p>To implement it, we created the following &lt;code>.yml&lt;/code> configuration, representing the build-proxy-promote model, and used &lt;a href="https://docs.gitlab.com/ee/ci/yaml/#includefile">&lt;code>include:file&lt;/code>&lt;/a> to bring it into our &lt;code>.gitlab-ci.yml&lt;/code>.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#75715e"># This file allows creating a prebuild-proxy-(build)-promote workflow with ease. &lt;/span>&lt;span style="color:#75715e"># &lt;/span>&lt;span style="color:#75715e"># The idea is that that in the prebuild step we build less-frequently-changed &lt;/span>&lt;span style="color:#75715e"># docker images than in the build step. This allows us to significantly speed &lt;/span>&lt;span style="color:#75715e"># up CI times. &lt;/span>&lt;span style="color:#75715e"># &lt;/span>&lt;span style="color:#75715e"># Setting Up &lt;/span>&lt;span style="color:#75715e"># ========== &lt;/span>&lt;span style="color:#75715e"># &lt;/span>&lt;span style="color:#75715e"># A basic setup consists of the following: &lt;/span>&lt;span style="color:#75715e"># &lt;/span>&lt;span style="color:#75715e"># 1\. Prebuild (extends .bpp:build) - build docker images if relevant files changed &lt;/span>&lt;span style="color:#75715e"># 2\. Proxy (extends .bpp:proxy) - allows the rest of the CI to know whether Prebuild created new images or not &lt;/span>&lt;span style="color:#75715e"># 3\. Build [Optional] (extends .bpp:build) - builds extra, more-frequently-changing images. &lt;/span>&lt;span style="color:#75715e"># This is not a conditional step! &lt;/span>&lt;span style="color:#75715e"># 4\. Use (custom step) - here we actually use the images we created! &lt;/span>&lt;span style="color:#75715e"># 5\. Promote (extends .bpp:promote) - if required, pushes the newly built images to the project&amp;#39;s repository. &lt;/span>&lt;span style="color:#75715e"># &lt;/span>&lt;span style="color:#75715e"># These 5 steps should be in 5 different, consecutive stages for things to work. &lt;/span>&lt;span style="color:#75715e"># The prebuild step, being conditional, should not have any other step requiring it. &lt;/span>&lt;span style="color:#75715e"># All other steps (that need the prebuilt images) should require the proxy step instead, &lt;/span>&lt;span style="color:#75715e"># and use the ${PROXY_TAG} to as a label to the relevant docker images.&lt;/span>&lt;span style="color:#f92672">.bpp:build&lt;/span>: &lt;span style="color:#f92672">variables&lt;/span>: &lt;span style="color:#75715e"># The names of all the docker images we want to pull from our registry&lt;/span> &lt;span style="color:#f92672">TO_PULL&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#75715e"># The tag to use for pulling the images. This will usually be ${PROXY_TAG}&lt;/span> &lt;span style="color:#f92672">PULL_TAG&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#75715e"># The name of the image and path of the dockerfile for building docker images.&lt;/span> &lt;span style="color:#75715e"># The root path for the dockers will be the root of the project&lt;/span> &lt;span style="color:#75715e"># Format the variable as follows:&lt;/span> &lt;span style="color:#75715e">#&lt;/span> &lt;span style="color:#75715e"># &amp;gt;-&lt;/span> &lt;span style="color:#75715e"># &amp;#34;some_name the/relevant/path/Dockerfile&amp;#34;&lt;/span> &lt;span style="color:#75715e"># &amp;#34;some_other_name another/relevant/path/Dockerfile&amp;#34;&lt;/span> &lt;span style="color:#75715e">#&lt;/span> &lt;span style="color:#75715e"># Note that the quotes are significant!&lt;/span> &lt;span style="color:#f92672">TO_BUILD&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#75715e"># The names of the images we want to push.&lt;/span> &lt;span style="color:#75715e"># They will all be pushed with the ${CI_COMMIT_SHA} tag.&lt;/span> &lt;span style="color:#f92672">TO_PUSH&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#f92672">script&lt;/span>: - &lt;span style="color:#ae81ff">docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY_IMAGE}&lt;/span> - &lt;span style="color:#ae81ff">export DOCKER_BUILDKIT=1&lt;/span> &lt;span style="color:#75715e"># This cannot be in the `variables` field since users overwrite it.&lt;/span> - |&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74"> for IMAGE_NAME in ${TO_PULL}&lt;/span>&lt;span style="color:#e6db74"> do&lt;/span>&lt;span style="color:#e6db74"> echo &amp;#34;***********************************&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> echo &amp;#34;Pulling ${IMAGE_NAME}&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> echo &amp;#34;-----------------------------------&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> echo &amp;#34;docker pull ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${PULL_TAG}&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> echo &amp;#34;DOCKER_BUILDKIT=1 docker tag \&lt;/span>&lt;span style="color:#e6db74"> ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${PULL_TAG} \&lt;/span>&lt;span style="color:#e6db74"> ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:latest&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> echo &amp;#34;***********************************&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> docker pull ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${PULL_TAG}&lt;/span>&lt;span style="color:#e6db74"> docker tag \&lt;/span>&lt;span style="color:#e6db74"> ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${PULL_TAG} \&lt;/span>&lt;span style="color:#e6db74"> ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:latest&lt;/span>&lt;span style="color:#e6db74"> done&lt;/span> - |&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74"> eval &amp;#34;ARRAY=($TO_BUILD)&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> for ITEM in &amp;#34;${ARRAY[@]}&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> do&lt;/span>&lt;span style="color:#e6db74"> MY_NAME=${ITEM% *}&lt;/span>&lt;span style="color:#e6db74"> MY_PATH=${ITEM#* }&lt;/span>&lt;span style="color:#e6db74"> echo &amp;#34;***********************************&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> echo &amp;#34;Building ${MY_NAME} from ${MY_PATH}&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> echo &amp;#34;-----------------------------------&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> echo &amp;#34;DOCKER_BUILDKIT=1 docker build \&lt;/span>&lt;span style="color:#e6db74"> --build-arg BUILDKIT_INLINE_CACHE=1 \&lt;/span>&lt;span style="color:#e6db74"> -t ${CI_REGISTRY_IMAGE}/${MY_NAME} \&lt;/span>&lt;span style="color:#e6db74"> -t ${CI_REGISTRY_IMAGE}/${MY_NAME}:${CI_COMMIT_SHA} \&lt;/span>&lt;span style="color:#e6db74"> -f ${MY_PATH} \&lt;/span>&lt;span style="color:#e6db74"> --label &amp;#34;commit_sha=${CI_COMMIT_SHA}&amp;#34; \&lt;/span>&lt;span style="color:#e6db74"> .&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> echo &amp;#34;***********************************&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> docker build \&lt;/span>&lt;span style="color:#e6db74"> --build-arg BUILDKIT_INLINE_CACHE=1 \&lt;/span>&lt;span style="color:#e6db74"> -t ${CI_REGISTRY_IMAGE}/${MY_NAME} \&lt;/span>&lt;span style="color:#e6db74"> -t ${CI_REGISTRY_IMAGE}/${MY_NAME}:${CI_COMMIT_SHA} \&lt;/span>&lt;span style="color:#e6db74"> -f ${MY_PATH} \&lt;/span>&lt;span style="color:#e6db74"> --label &amp;#34;commit_sha=${CI_COMMIT_SHA}&amp;#34; \&lt;/span>&lt;span style="color:#e6db74"> .&lt;/span>&lt;span style="color:#e6db74"> done&lt;/span> - |&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74"> for IMAGE_NAME in $TO_PUSH&lt;/span>&lt;span style="color:#e6db74"> do&lt;/span>&lt;span style="color:#e6db74"> echo &amp;#34;***********************************&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> echo &amp;#34;Pushing ${IMAGE_NAME}&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> echo &amp;#34;-----------------------------------&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> echo &amp;#34;DOCKER_BUILDKIT=1 docker push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${CI_COMMIT_SHA}&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> echo &amp;#34;***********************************&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> docker push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${CI_COMMIT_SHA}&lt;/span>&lt;span style="color:#e6db74"> done&lt;/span> &lt;span style="color:#f92672">.bpp:proxy&lt;/span>: &lt;span style="color:#f92672">variables&lt;/span>: &lt;span style="color:#75715e"># The names of jobs we want to proxy - if any of them succeeded, we proxy.&lt;/span> &lt;span style="color:#f92672">BUILD_JOBS&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#f92672">script&lt;/span>: - &lt;span style="color:#ae81ff">PROXY_TAG=latest&lt;/span> - &lt;span style="color:#ae81ff">apt-get -qq update&lt;/span> - &lt;span style="color:#ae81ff">apt-get -qq install jq&lt;/span> &lt;span style="color:#75715e"># Get the successful jobs for the current pipeline&lt;/span> - &amp;gt;-&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74"> curl&lt;/span>&lt;span style="color:#e6db74"> --header &amp;#34;PRIVATE-TOKEN:${GITLAB_TOKEN}&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/pipelines/${CI_PIPELINE_ID}/jobs?scope[]=success&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> &amp;gt; jobs.json&lt;/span> &lt;span style="color:#75715e"># Compare the job names from the pipeline with the provided job names&lt;/span> - &lt;span style="color:#ae81ff">EXECUTED=$(comm -12 &amp;lt;(jq -r &amp;#39;.[].name&amp;#39; jobs.json | sort) &amp;lt;(echo ${BUILD_JOBS} | tr &amp;#39; &amp;#39; &amp;#39;\n&amp;#39; | sort))&lt;/span> &lt;span style="color:#75715e"># If a build job was executed, we need to set the proxy tag to the current commit sha.&lt;/span> - |&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74"> if [ ! -z &amp;#34;$EXECUTED&amp;#34; ]&lt;/span>&lt;span style="color:#e6db74"> then&lt;/span>&lt;span style="color:#e6db74"> PROXY_TAG=${CI_COMMIT_SHA}&lt;/span>&lt;span style="color:#e6db74"> fi&lt;/span> - &lt;span style="color:#ae81ff">echo &amp;#34;PROXY_TAG=${PROXY_TAG}&amp;#34; &amp;gt;&amp;gt; deploy.env&lt;/span> &lt;span style="color:#75715e"># Print out the proxy tag - for debug purposes&lt;/span> - &lt;span style="color:#ae81ff">echo &amp;#34;PROXY_TAG=${PROXY_TAG}&amp;#34;&lt;/span> &lt;span style="color:#f92672">artifacts&lt;/span>: &lt;span style="color:#75715e"># To get the proxy tag, you need to get the artifacts from this job.&lt;/span> &lt;span style="color:#75715e"># The proxy tag will be ${PROXY_TAG}&lt;/span> &lt;span style="color:#f92672">reports&lt;/span>: &lt;span style="color:#f92672">dotenv&lt;/span>: &lt;span style="color:#ae81ff">deploy.env&lt;/span>&lt;span style="color:#f92672">.bpp:promote&lt;/span>: &lt;span style="color:#f92672">variables&lt;/span>: &lt;span style="color:#75715e"># The names of the images you wish to promote.&lt;/span> &lt;span style="color:#75715e"># They need to have been built &amp;amp; pushed by a previous build step.&lt;/span> &lt;span style="color:#f92672">TO_PROMOTE&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#f92672">script&lt;/span>: - |&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74"> if [ &amp;#34;${PROXY_TAG}&amp;#34; = &amp;#34;latest&amp;#34; ]; then&lt;/span>&lt;span style="color:#e6db74"> echo &amp;#34;Nothing to promote.&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> else&lt;/span>&lt;span style="color:#e6db74"> echo &amp;#34;Promoting docker image.&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY_IMAGE}&lt;/span>&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74"> for IMAGE in ${TO_PROMOTE} ; do&lt;/span>&lt;span style="color:#e6db74"> docker pull ${CI_REGISTRY_IMAGE}/${IMAGE}:${CI_COMMIT_SHA}&lt;/span>&lt;span style="color:#e6db74"> docker tag ${CI_REGISTRY_IMAGE}/${IMAGE}:${CI_COMMIT_SHA} ${CI_REGISTRY_IMAGE}/${IMAGE}:latest&lt;/span>&lt;span style="color:#e6db74"> docker push ${CI_REGISTRY_IMAGE}/${IMAGE}:latest&lt;/span>&lt;span style="color:#e6db74"> done&lt;/span>&lt;span style="color:#e6db74"> fi&lt;/span> &lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Finding a memory-leak in my Python code</title><link>https://blog.tamir.dev/posts/finding-a-memory-leak-in-my-python-code/</link><pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate><guid>https://blog.tamir.dev/posts/finding-a-memory-leak-in-my-python-code/</guid><description>&lt;p>Last week I had to fix a memory leak in a Python program for the first time. A long running process started eating too much RAM (only ~20GB to much) and the friendly OOM Killer had to step in and terminate this. Since this kept happening, I had to go ahead and fix the issue.&lt;/p>&lt;h2 id="step-1---reproduction">Step 1 - Reproduction&lt;/h2>&lt;p>As with every bug, before you can reliably fix it, you must reproduce it.&lt;/p>&lt;p>Now, while I had a reliable reproduction (after all, the process had regular dates with the OOM Killer), 3 days isn&amp;rsquo;t the best cycle time when you wanna solve a bug. So into the code we go.&lt;/p>&lt;p>The main idea is to start with the main loop, and try to narrow down the code that is must run for the leak to manifest. The process involves some educated guesses (where are the likely memory and allocation hogs in your process? What parts are likely to leak? Do you have any code that requires cleanup?), waiting, frustration, and tools.&lt;/p>&lt;h3 id="tracemalloc">tracemalloc&lt;/h3>&lt;p>While each developer and codebase have their own unique guesses and frustrations, good tooling applies more widely. For this part, I used Python&amp;rsquo;s &lt;a href="https://docs.python.org/3/library/tracemalloc.html">tracemalloc module&lt;/a>.&lt;/p>&lt;p>Among other things, &lt;code>tracemalloc&lt;/code> allows tracking memory usage between 2 points in your code in a very low-overhead manner.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">tracemalloc&lt;span style="color:#f92672">.&lt;/span>start() &lt;span style="color:#75715e"># Start the memory trace&lt;/span>code_suspected_of_leak()current, peak &lt;span style="color:#f92672">=&lt;/span> tracemalloc&lt;span style="color:#f92672">.&lt;/span>get_traced_memory() &lt;span style="color:#75715e"># Get memory stats&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After running this code, &lt;code>peak&lt;/code> will hold the peak-memory-usage during the trace period, and &lt;code>current&lt;/code> will hold the difference from the start of the trace to the current state. You should expect &lt;code>current&lt;/code> to be non-zero. But if it goes too high - your code is probably leaking.&lt;/p>&lt;p>By placing such traces around suspect pieces of our code, we can find which parts are leaking. Just remember - only do this with functions that are expected to retain no state. If a function mutates an external object, or is a member function, it is very to exhibit changes in memory usage.&lt;/p>&lt;h2 id="step-2---triage">Step 2 - Triage&lt;/h2>&lt;p>Once we have a reproduction (that hopefully takes a relatively short amount of time), we want to find the leaking code. We can try and keep narrowing our measured code down until we find the relevant line, but the deeper we go, the harder it is to separate the leak from normal execution.&lt;/p>&lt;p>So at this point, we&amp;rsquo;d like to look into the allocated memory, and see which objects are there when they shouldn&amp;rsquo;t be.&lt;/p>&lt;h3 id="pympler">pympler&lt;/h3>&lt;p>For inspecting the objects in a Python process, I recommend using &lt;a href="https://pympler.readthedocs.io/en/latest/">&lt;code>pympler&lt;/code>&lt;/a>.&lt;/p>&lt;blockquote>&lt;p>Pympler is a development tool to measure, monitor and analyze the memory behavior of Python objects in a running Python application.&lt;/p>&lt;/blockquote>&lt;p>We&amp;rsquo;re going to use it to do 2 things.&lt;/p>&lt;h4 id="inspecting-allocated-objects">Inspecting Allocated Objects&lt;/h4>&lt;p>First, we&amp;rsquo;re going to use &lt;code>pympler&lt;/code> to show us which objects were allocated during our repro &amp;amp; are still allocated.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">from&lt;/span> pympler &lt;span style="color:#f92672">import&lt;/span> tracker, muppy, refbrowser&lt;span style="color:#f92672">from&lt;/span> functools &lt;span style="color:#f92672">import&lt;/span> lru_cache&lt;span style="color:#75715e"># Naive code to trigger a leak&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span>: &lt;span style="color:#66d9ef">def&lt;/span> __init__(self, value): self&lt;span style="color:#f92672">.&lt;/span>_value &lt;span style="color:#f92672">=&lt;/span> value &lt;span style="color:#66d9ef">def&lt;/span> __repr__(self): &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Value(&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>self&lt;span style="color:#f92672">.&lt;/span>_value&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">)&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">@lru_cache&lt;/span>(maxsize&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">100&lt;/span>)&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">get_value&lt;/span>(value): &lt;span style="color:#66d9ef">return&lt;/span> Value(value)&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">code_suspected_of_leak&lt;/span>(): &lt;span style="color:#66d9ef">for&lt;/span> x &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">10&lt;/span>): print(get_value(x))&lt;span style="color:#75715e"># Measuring code&lt;/span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(): tr &lt;span style="color:#f92672">=&lt;/span> tracker&lt;span style="color:#f92672">.&lt;/span>SummaryTracker() code_suspected_of_leak() tr&lt;span style="color:#f92672">.&lt;/span>print_diff()&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once we run this, we get a nice table showing us a summary of objects created and destroyed:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text"> types | # objects | total size======================= | =========== | ============ list | 4892 | 500.59 KB str | 4887 | 341.45 KB int | 1053 | 28.79 KB dict | 13 | 1.90 KB __main__.Value | 10 | 640 B function (store_info) | 1 | 144 B cell | 2 | 112 B weakref | 1 | 88 B tuple | -8 | -680 B&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you can see - there are quite a few primitive objects generated, and also some &lt;code>__main__.Value&lt;/code> objects. In my experience, primitives are harder to track, as they lack meaning in the code. Your own types, however, are usually only used in certain parts of the codebase, making them easier to make sense of.&lt;/p>&lt;p>Now that we see that we have 10 new &lt;code>Value&lt;/code> objects, it is time to figure out who&amp;rsquo;s holding them in memory.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">output_function&lt;/span>(o): &lt;span style="color:#66d9ef">return&lt;/span> str(type(o))all_objects &lt;span style="color:#f92672">=&lt;/span> muppy&lt;span style="color:#f92672">.&lt;/span>get_objects()root &lt;span style="color:#f92672">=&lt;/span> muppy&lt;span style="color:#f92672">.&lt;/span>filter(all_objects, Value)[&lt;span style="color:#ae81ff">0&lt;/span>]cb &lt;span style="color:#f92672">=&lt;/span> refbrowser&lt;span style="color:#f92672">.&lt;/span>ConsoleBrowser(root, maxdepth&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>, str_func&lt;span style="color:#f92672">=&lt;/span>output_function)cb&lt;span style="color:#f92672">.&lt;/span>print_tree()&lt;/code>&lt;/pre>&lt;/div>&lt;p>This&amp;rsquo;ll print the following:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">&amp;lt;class &amp;#39;__main__.Value&amp;#39;&amp;gt;-+-&amp;lt;class &amp;#39;list&amp;#39;&amp;gt; +-&amp;lt;class &amp;#39;functools._lru_cache_wrapper&amp;#39;&amp;gt;-+-&amp;lt;class &amp;#39;list&amp;#39;&amp;gt; +-&amp;lt;class &amp;#39;dict&amp;#39;&amp;gt;&lt;/code>&lt;/pre>&lt;/div>&lt;p>Giving away the issue - the &lt;code>lru_cache&lt;/code> is keeping our &lt;code>Value&lt;/code> objects. Just as designed&amp;hellip;&lt;/p>&lt;p>I know this looks like a bit of a contrived example, but the &lt;code>lru_cache&lt;/code> keeping objects in memory was exactly the issue I had. It was just buried under far more code.&lt;/p>&lt;h2 id="step-3---solution">Step 3 - Solution&lt;/h2>&lt;p>Currently, I use the ugliest solution I can imagine - functions decorated with &lt;code>lru_cache&lt;/code> have a &lt;code>cache_clear()&lt;/code> method, and I&amp;rsquo;m calling that at specific places in my code. It&amp;rsquo;s ugly, but it works.&lt;/p>&lt;p>A cleaner solution would require dedicated caches &amp;amp; better cleanup mechanisms. You can read a relevant discussion &lt;a href="https://bugs.python.org/issue19859">here&lt;/a>.&lt;/p></description></item><item><title>TIL Python attribute lookup order is tricky</title><link>https://blog.tamir.dev/posts/til-python-attribute-lookup-order-is-tricky/</link><pubDate>Wed, 03 Jun 2020 00:00:00 +0000</pubDate><guid>https://blog.tamir.dev/posts/til-python-attribute-lookup-order-is-tricky/</guid><description>&lt;p>&lt;em>This post is brought to you in the spirit of converting tweetstorms to blogposts.&lt;a href="https://twitter.com/tmr232/status/1268244709723582467">to the tweetstorm&lt;/a>&lt;/em>&lt;/p>&lt;h2 id="surprise-">Surprise! 🎁&lt;/h2>&lt;p>In Python, if property access raises AttributeError, and the class implemented &lt;strong>getattr&lt;/strong>, it will get called with the property name.This results in some very cryptic errors.&lt;/p>&lt;p>If you run the following code (&lt;a href="https://repl.it/repls/PresentBitterUnit">repl&lt;/a>):&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Thing&lt;/span>: name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Thing&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">NameProvider&lt;/span>: &lt;span style="color:#66d9ef">def&lt;/span> __init__(self, name): self&lt;span style="color:#f92672">.&lt;/span>name &lt;span style="color:#f92672">=&lt;/span> name &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">get_name&lt;/span>(self): &lt;span style="color:#66d9ef">return&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>nam&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ThingWrapper&lt;/span>: &lt;span style="color:#66d9ef">def&lt;/span> __init__(self, thing, name_provider): self&lt;span style="color:#f92672">.&lt;/span>thing &lt;span style="color:#f92672">=&lt;/span> thing self&lt;span style="color:#f92672">.&lt;/span>name_provider &lt;span style="color:#f92672">=&lt;/span> name_provider &lt;span style="color:#a6e22e">@property&lt;/span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>(self): &lt;span style="color:#66d9ef">return&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>name_provider&lt;span style="color:#f92672">.&lt;/span>get_name() &lt;span style="color:#66d9ef">def&lt;/span> __getattr__(self, name): &lt;span style="color:#66d9ef">return&lt;/span> getattr(self&lt;span style="color:#f92672">.&lt;/span>thing, name)&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(): thing &lt;span style="color:#f92672">=&lt;/span> Thing() name_provider &lt;span style="color:#f92672">=&lt;/span> NameProvider(name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Not Thing&amp;#34;&lt;/span>) thing_wrapper &lt;span style="color:#f92672">=&lt;/span> ThingWrapper(thing, name_provider) print(thing&lt;span style="color:#f92672">.&lt;/span>name) print(thing_wrapper&lt;span style="color:#f92672">.&lt;/span>name)&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;__main__&amp;#39;&lt;/span>: main()&lt;/code>&lt;/pre>&lt;/div>&lt;p>You&amp;rsquo;ll get a surprising result:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">ThingThing&lt;/code>&lt;/pre>&lt;/div>&lt;p>You might have expected &lt;code>&amp;quot;Not Thing&amp;quot;&lt;/code> as the second line, or maybe an exception to be raised from &lt;code>NameProvider.get_name()&lt;/code> due to the typo there (&lt;code>self.nam&lt;/code> instead of &lt;code>self.name&lt;/code>). But instead, we got the name attribute from our &lt;code>Thing&lt;/code> instance.&lt;/p>&lt;h2 id="analysis-">Analysis 🔎&lt;/h2>&lt;p>If you&amp;rsquo;ve every used &lt;code>__getattr__()&lt;/code> you know that it is called when the named attribute was not found using other lookup mechanisms. That said, it might not be clear to you that this includes properties raising &lt;code>AttributeError&lt;/code> exceptions. It definitely wasn&amp;rsquo;t clear to me.&lt;/p>&lt;p>That is, it was unclear to me despite being clearly stated in the &lt;a href="https://docs.python.org/3/reference/datamodel.html#object.__getattr__">documentation for &lt;strong>getattr&lt;/strong>()&lt;/a>&lt;/p>&lt;blockquote>&lt;p>&lt;strong>&lt;code>object.__getattr__(self, name)&lt;/code>&lt;/strong>Called when the default attribute access fails with an &lt;code>AttributeError&lt;/code> (either &lt;code>__getattribute__()&lt;/code> raises an &lt;code>AttributeError&lt;/code> because name is not an instance attribute or an attribute in the class tree for self; or &lt;code>__get__()&lt;/code> of a name property raises &lt;code>AttributeError&lt;/code>). This method should either return the (computed) attribute value or raise an &lt;code>AttributeError&lt;/code> exception.&lt;/p>&lt;/blockquote>&lt;p>Beside being surprising, there are 2 main issues here:&lt;/p>&lt;ol>&lt;li>Any code down the stack from the property can effectively change attribute lookup for the class by throwing an &lt;code>AttributeError&lt;/code>. In the above example - a typo in &lt;code>NameProvider&lt;/code> caused an attribute to be taken from &lt;code>Thing&lt;/code> instead, against the programmer&amp;rsquo;s obvious intention.&lt;/li>&lt;li>The exception is silenced. There is no way for the programmer to catch the exception outside the property getter. This makes the errors &lt;em>very&lt;/em> hard to track down. This also means that whenever you add &lt;code>__getattr__()&lt;/code> to a class, you&amp;rsquo;re silencing all &lt;code>AttributeError&lt;/code> exceptions that were previously thrown from properties.&lt;/li>&lt;/ol>&lt;p>Like anything in Python, you can hack around the issue. In this case - with fancy decorators!&lt;/p>&lt;h2 id="solution-">Solution? 🐍&lt;/h2>&lt;p>Consider the following code (&lt;a href="https://repl.it/repls/IntentionalIgnorantLinuxpc">repl&lt;/a>):&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ExceptionCatcher&lt;/span>: &lt;span style="color:#66d9ef">def&lt;/span> __init__(self, f): self&lt;span style="color:#f92672">.&lt;/span>f &lt;span style="color:#f92672">=&lt;/span> f self&lt;span style="color:#f92672">.&lt;/span>exception &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span> &lt;span style="color:#66d9ef">def&lt;/span> __call__(self, &lt;span style="color:#f92672">*&lt;/span>args, &lt;span style="color:#f92672">**&lt;/span>kwargs): &lt;span style="color:#66d9ef">try&lt;/span>: &lt;span style="color:#66d9ef">return&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>f(&lt;span style="color:#f92672">*&lt;/span>args, &lt;span style="color:#f92672">**&lt;/span>kwargs) &lt;span style="color:#66d9ef">except&lt;/span> &lt;span style="color:#a6e22e">Exception&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> e: self&lt;span style="color:#f92672">.&lt;/span>exception &lt;span style="color:#f92672">=&lt;/span> e &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span>: self&lt;span style="color:#f92672">.&lt;/span>exception &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">store_exception&lt;/span>(f): &lt;span style="color:#66d9ef">return&lt;/span> ExceptionCatcher(f)&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">load_exception&lt;/span>(f): &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">_raise_property_exception&lt;/span>(instance, name): &lt;span style="color:#66d9ef">try&lt;/span>: class_attr &lt;span style="color:#f92672">=&lt;/span> getattr(instance&lt;span style="color:#f92672">.&lt;/span>__class__, name) &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> isinstance(class_attr, property): &lt;span style="color:#66d9ef">return&lt;/span> exception &lt;span style="color:#f92672">=&lt;/span> class_attr&lt;span style="color:#f92672">.&lt;/span>fget&lt;span style="color:#f92672">.&lt;/span>exception &lt;span style="color:#66d9ef">except&lt;/span> &lt;span style="color:#a6e22e">AttributeError&lt;/span>: &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> exception: &lt;span style="color:#66d9ef">raise&lt;/span> exception &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">_wrapper&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>args, &lt;span style="color:#f92672">**&lt;/span>kwargs): _raise_property_exception(&lt;span style="color:#f92672">*&lt;/span>args, &lt;span style="color:#f92672">**&lt;/span>kwargs) &lt;span style="color:#66d9ef">return&lt;/span> f(&lt;span style="color:#f92672">*&lt;/span>args, &lt;span style="color:#f92672">**&lt;/span>kwargs) &lt;span style="color:#66d9ef">return&lt;/span> _wrapper&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ThingWrapper&lt;/span>: &lt;span style="color:#66d9ef">def&lt;/span> __init__(self, thing, name_provider): self&lt;span style="color:#f92672">.&lt;/span>thing &lt;span style="color:#f92672">=&lt;/span> thing self&lt;span style="color:#f92672">.&lt;/span>name_provider &lt;span style="color:#f92672">=&lt;/span> name_provider &lt;span style="color:#a6e22e">@property&lt;/span> &lt;span style="color:#a6e22e">@store_exception&lt;/span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>(self): &lt;span style="color:#66d9ef">return&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>name_provider&lt;span style="color:#f92672">.&lt;/span>get_name() &lt;span style="color:#a6e22e">@load_exception&lt;/span> &lt;span style="color:#66d9ef">def&lt;/span> __getattr__(self, name): &lt;span style="color:#66d9ef">return&lt;/span> getattr(self&lt;span style="color:#f92672">.&lt;/span>thing, name)&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you run this version, you&amp;rsquo;ll get the following exception:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#a6e22e">AttributeError&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;NameProvider&amp;#39;&lt;/span> object has no attribute &lt;span style="color:#e6db74">&amp;#39;nam&amp;#39;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This matches our expectations far better.&lt;/p>&lt;p>This result is achieved in two steps. First, we store all the exceptions thrown from &lt;code>name()&lt;/code> so that we can throw them again if needed. Then, before calling &lt;code>__getattr__()&lt;/code>, we check if we got there due to a property raising an exception. If we did - we just re-raise that exception.&lt;/p>&lt;p>The rest is implementation details, and I probably missed something there (you might notice that I corrected a bug when converting the tweets to this post - in the previous version, I forget to reset the exception storage after successful property retrieval).&lt;/p>&lt;p>While this solution works, and may be useful for detecting similar bugs, I would probably avoid using it in production code. Instead, I&amp;rsquo;d be happy to have some standard Python construct to provide this functionality.&lt;/p></description></item><item><title>Snake Eyes: Extension Methods</title><link>https://blog.tamir.dev/posts/snake-eyes-extension-methods/</link><pubDate>Fri, 06 Mar 2020 00:00:00 +0000</pubDate><guid>https://blog.tamir.dev/posts/snake-eyes-extension-methods/</guid><description>&lt;p>Today we set out to implement a feature I saw and liked in Kotlin - &lt;a href="https://kotlinlang.org/docs/reference/extensions.html">Extension Methods&lt;/a>.&lt;/p>&lt;p>You can follow along with working code samples &lt;a href="https://repl.it/@TamirBahar/python-extension-methods">here&lt;/a>, or get the code &lt;a href="https://github.com/tmr232/python-extension-methods">here&lt;/a>&lt;/p>&lt;p>Extension methods are a nice piece of syntactic-sugar that allow you to define free-functions and call them like instance methods. In Kotlin, it looks something like this:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">Square&lt;/span>.draw() { drawSquare(&lt;span style="color:#66d9ef">this&lt;/span>)}&lt;span style="color:#75715e">// ...&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">val&lt;/span> square = getSquare()square.draw()&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, since they are free, static functions, they follow the same rules. They are not part of the class, nor have access to private members. And they can only be called in a scope where they are visible. Adding them in your code does not affect other code. Additionally, true member functions, if they exist, take precedence over extension methods (this is especially important with generic extension methods).&lt;/p>&lt;p>In our code today, we&amp;rsquo;ll try to mimic the features of extension methods as closely as possible. We&amp;rsquo;ll use the following syntax:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#a6e22e">@extend&lt;/span>(Square)&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">draw&lt;/span>(square): draw_square(square)&lt;/code>&lt;/pre>&lt;/div>&lt;p>For extension methods, and the following implementation of &lt;code>Square&lt;/code> in our code throughout:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">from&lt;/span> dataclasses &lt;span style="color:#f92672">import&lt;/span> dataclass&lt;span style="color:#a6e22e">@dataclass&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Square&lt;/span>: length: int&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="monkey-patching-">Monkey Patching 🙈&lt;/h2>&lt;p>Python is a very dynamic language. Among other things, it allows us to change the attributes of (non-builtin) types at run-time. This means that we can extend our &lt;code>Square&lt;/code> class by adding a &lt;code>draw&lt;/code> method to it at run-time.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">Square&lt;span style="color:#f92672">.&lt;/span>draw &lt;span style="color:#f92672">=&lt;/span> draw_square&lt;/code>&lt;/pre>&lt;/div>&lt;p>We&amp;rsquo;re now free to call &lt;code>square.draw()&lt;/code>. Before we discuss the draw-backs, let&amp;rsquo;s implement it with the syntax we defined:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">monkey_extend&lt;/span>(cls): &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">_decorator&lt;/span>(f): setattr(cls, f&lt;span style="color:#f92672">.&lt;/span>__name__, f) &lt;span style="color:#66d9ef">return&lt;/span> _decorator&lt;span style="color:#a6e22e">@monkey_extend&lt;/span>(Square)&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">draw&lt;/span>(square): draw_square(square)&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s go over this. &lt;code>monkey_extend&lt;/code> is a decorator with arguments. This is a common pattern where we use a decorator factory (&lt;code>monkey_extend&lt;/code>) to create a new decorator (&lt;code>_decorator&lt;/code>) as a closure, giving it access to the parameters passed to the factory (&lt;code>cls&lt;/code>). Then, in the core of the decorator, we use &lt;code>setattr&lt;/code> to do our monkey-patching.&lt;/p>&lt;p>While this works, it has several issues:&lt;/p>&lt;ol>&lt;li>Scope - once set, it can be used with any &lt;code>Square&lt;/code> in any scope&lt;/li>&lt;li>Precedence - it will override any existing &lt;code>Square.draw&lt;/code>&lt;/li>&lt;/ol>&lt;p>Dealing with precedence is easy (using &lt;code>hasattr&lt;/code> to check for existing &lt;code>.draw&lt;/code>) so we&amp;rsquo;ll focus on the scoping first.&lt;/p>&lt;h2 id="dynamic-attribute-lookup-">Dynamic Attribute Lookup ✨&lt;/h2>&lt;p>The first thing we know is that we need our new attribute to be there in some cases, and be gone in others - we need dynamic resolution. To do that, we&amp;rsquo;ll use &lt;a href="https://docs.python.org/3/reference/datamodel.html#object.__getattr__">&lt;code>__getattr__&lt;/code>&lt;/a>. In Python classes, &lt;code>__getattr__&lt;/code> is used in attribute lookup as a last resort, called when the other ways of looking up attributes came up empty. We&amp;rsquo;ll write our &lt;code>__getattr__&lt;/code> along the following lines:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">my_getattr&lt;/span>(obj, name): &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> has_extension(obj, name): &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">AttributeError&lt;/span>() &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> is_in_scope(name): &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">AttributeError&lt;/span>() &lt;span style="color:#66d9ef">return&lt;/span> our_extension&lt;/code>&lt;/pre>&lt;/div>&lt;p>The first check, &lt;code>has_extension&lt;/code>, is basically checking whether the name we got matches the name of our extension method. Nothing to elaborate yet. Scoping, once again, remains the trickier part.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> functools&lt;span style="color:#f92672">import&lt;/span> inspect&lt;span style="color:#f92672">from&lt;/span> collections &lt;span style="color:#f92672">import&lt;/span> ChainMap&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">scoped_extend&lt;/span>(cls): &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">_decorator&lt;/span>(f): &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">_getattr&lt;/span>(obj, name): &lt;span style="color:#75715e"># (2)&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> name &lt;span style="color:#f92672">!=&lt;/span> f&lt;span style="color:#f92672">.&lt;/span>__name__: &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">AttributeError&lt;/span>() &lt;span style="color:#75715e"># (3)&lt;/span> frame &lt;span style="color:#f92672">=&lt;/span> inspect&lt;span style="color:#f92672">.&lt;/span>stack()[&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>frame scope &lt;span style="color:#f92672">=&lt;/span> ChainMap(frame&lt;span style="color:#f92672">.&lt;/span>f_locals, frame&lt;span style="color:#f92672">.&lt;/span>f_globals) &lt;span style="color:#66d9ef">if&lt;/span> scope&lt;span style="color:#f92672">.&lt;/span>get(f&lt;span style="color:#f92672">.&lt;/span>__name__) &lt;span style="color:#f92672">==&lt;/span> f: &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">AttributeError&lt;/span>() &lt;span style="color:#75715e"># (4)&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> functools&lt;span style="color:#f92672">.&lt;/span>partial(f, obj) &lt;span style="color:#75715e"># (1)&lt;/span> cls&lt;span style="color:#f92672">.&lt;/span>__getattr__ &lt;span style="color:#f92672">=&lt;/span> _getattr &lt;span style="color:#66d9ef">return&lt;/span> f &lt;span style="color:#66d9ef">return&lt;/span> _decorator&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is a bit much, so we&amp;rsquo;ll go over it in detail.&lt;/p>&lt;p>As a basis, we used the same decorator-with-parameters pattern here. We have &lt;code>scoped_extend&lt;/code> take the class we want to extend, then return &lt;code>_decorator&lt;/code> to get the job done. But instead of setting the attribute we want to extend, we monkey-patch &lt;code>cls&lt;/code>&amp;rsquo;s &lt;code>__getattr__&lt;/code> to our implementation (See &lt;strong>(1)&lt;/strong>). This will override any existing implementation of &lt;code>__getattr__&lt;/code>, but we&amp;rsquo;ll get to that later. For now, we&amp;rsquo;ll focus on our implementation of &lt;code>__getattr__&lt;/code>.&lt;/p>&lt;p>In &lt;strong>(2)&lt;/strong> we implemented &lt;code>has_extnesion&lt;/code> - we simply compare the name we got to the name of our extension method. Then, in &lt;strong>(3)&lt;/strong>, comes some Python magic. Python allows us to inspect the running program, to see where we were called from and what variables were in scope in that code. To do that, we use the &lt;a href="https://docs.python.org/3/library/inspect.html">&lt;code>inspect&lt;/code>&lt;/a> module. We use &lt;code>inspect.stack()&lt;/code> to get the call-stack for the current execution, then access the second frame (&lt;code>[1]&lt;/code>) to get our caller. This will be where &lt;code>getattr(obj, name)&lt;/code> is invoked or &lt;code>obj.name&lt;/code> is used. We use &lt;code>.frame&lt;/code> to get the execution frame, and &lt;code>.f_locals&lt;/code> and &lt;code>f_globals&lt;/code> to get the local and global variables available in that scope. They are equivalent to calling &lt;code>globals()&lt;/code> or &lt;code>locals()&lt;/code> in the relevant frame.&lt;/p>&lt;p>With the scope at hand, we perform a lookup to see whether the extension method we defined is in that scope. To make sure we have our extension method, we get it by name, then ensure that it is truly our method.&lt;/p>&lt;p>Finally, in &lt;strong>(4)&lt;/strong>, when we know our method should be active, we bind it to the instance of the extended class and return it.&lt;/p>&lt;h3 id="better-scoping">Better Scoping&lt;/h3>&lt;p>While our scope retrieval code works, it&amp;rsquo;s better to put it in a function rather than use it inline:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">_is_in_scope&lt;/span>(name, value): frame &lt;span style="color:#f92672">=&lt;/span> inspect&lt;span style="color:#f92672">.&lt;/span>stack()[&lt;span style="color:#ae81ff">2&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>frame &lt;span style="color:#66d9ef">return&lt;/span> ChainMap(frame&lt;span style="color:#f92672">.&lt;/span>f_locals, frame&lt;span style="color:#f92672">.&lt;/span>f_globals)&lt;span style="color:#f92672">.&lt;/span>get(name) &lt;span style="color:#f92672">==&lt;/span> value&lt;/code>&lt;/pre>&lt;/div>&lt;p>But, oh, we have to increment the stack index to &lt;code>2&lt;/code> since we&amp;rsquo;re deeper in the callstack. This is risky. Instead, we&amp;rsquo;ll use the following trick to get the frame:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">_get_first_external_stack_frame&lt;/span>(): &lt;span style="color:#66d9ef">for&lt;/span> frameinfo &lt;span style="color:#f92672">in&lt;/span> inspect&lt;span style="color:#f92672">.&lt;/span>stack(): &lt;span style="color:#66d9ef">if&lt;/span> frameinfo&lt;span style="color:#f92672">.&lt;/span>filename &lt;span style="color:#f92672">==&lt;/span> __file__: &lt;span style="color:#66d9ef">continue&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> frameinfo&lt;span style="color:#f92672">.&lt;/span>frame&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">_is_in_scope&lt;/span>(name, value): frame &lt;span style="color:#f92672">=&lt;/span> _get_first_external_stack_frame() &lt;span style="color:#66d9ef">return&lt;/span> ChainMap(frame&lt;span style="color:#f92672">.&lt;/span>f_locals, frame&lt;span style="color:#f92672">.&lt;/span>f_globals)&lt;span style="color:#f92672">.&lt;/span>get(name) &lt;span style="color:#f92672">==&lt;/span> value&lt;/code>&lt;/pre>&lt;/div>&lt;p>Instead of counting the frames in our code, changing them with every change - we&amp;rsquo;ll use the module system. We know that all of our scaffolding is in the same module, but the usage is not. This allows us to easily traverse the stack until we find code that does not belong in our module. &lt;em>That&lt;/em> is our calling code.&lt;/p>&lt;p>Since you&amp;rsquo;re probably wondering - yes. You need to change &lt;code>_get_first_external_stack_frame()&lt;/code> if you want to put it in a different module. Implementing it is left as an exercise to the reader.&lt;/p>&lt;h2 id="preserving-__getattr__">Preserving &lt;code>__getattr__&lt;/code>&lt;/h2>&lt;p>As mentioned before, our current implementation overrides any existing &lt;code>__getattr__&lt;/code> function for the class. Lucky for us, fixing it is easy:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">no_override_extend&lt;/span>(cls): &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">_decorator&lt;/span>(f): &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">_default&lt;/span>(_obj, _name): &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">AttributeError&lt;/span>() original_getattr &lt;span style="color:#f92672">=&lt;/span> getattr(cls, &lt;span style="color:#e6db74">&amp;#39;__getattr__&amp;#39;&lt;/span>, _default) &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">_getattr&lt;/span>(obj, name): &lt;span style="color:#66d9ef">with&lt;/span> suppress(&lt;span style="color:#a6e22e">AttributeError&lt;/span>): &lt;span style="color:#66d9ef">return&lt;/span> original_getattr(obj, name) &lt;span style="color:#66d9ef">if&lt;/span> name &lt;span style="color:#f92672">!=&lt;/span> f&lt;span style="color:#f92672">.&lt;/span>__name__: &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">AttributeError&lt;/span>() &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> _is_in_scope(f): &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">AttributeError&lt;/span>() &lt;span style="color:#66d9ef">return&lt;/span> functools&lt;span style="color:#f92672">.&lt;/span>partial(f, obj) cls&lt;span style="color:#f92672">.&lt;/span>__getattr__ &lt;span style="color:#f92672">=&lt;/span> _getattr &lt;span style="color:#66d9ef">return&lt;/span> f &lt;span style="color:#66d9ef">return&lt;/span> _decorator&lt;/code>&lt;/pre>&lt;/div>&lt;p>In &lt;strong>(1)&lt;/strong> we get the original &lt;code>__getattr__&lt;/code> method, to be stored for later usage. We use the &lt;code>_default&lt;/code> function to avoid an extra &lt;code>if&lt;/code> later. In &lt;strong>(2)&lt;/strong> we use the saved &lt;code>__getattr__&lt;/code>, making sure that we only proceed to our code if it raised an &lt;code>AttributeError&lt;/code> exception.&lt;/p>&lt;h2 id="interlude-">Interlude 🐍&lt;/h2>&lt;p>With &lt;code>no_override_extend&lt;/code> we have our first &amp;ldquo;to-spec&amp;rdquo; implementation of extension methods. We have both scoping and precedence down. It is time to celebrate and rest. But our quest is not done yet.&lt;/p>&lt;p>While our code works well for a proof-of-concept, there are still significant usability issues with it. Since the extension methods we create have nice and clean names, it is likely that we&amp;rsquo;ll want to use those names for other things. Unfortunately, once we do that, we&amp;rsquo;ll override the existing extension methods and they will no longer work:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#a6e22e">@extend&lt;/span>(Square)&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">draw&lt;/span>(square): draw_square(square)&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">draw&lt;/span>(): print(&lt;span style="color:#e6db74">&amp;#34;Drawing is awesome!&amp;#34;&lt;/span>)&lt;span style="color:#75715e"># ...&lt;/span>square&lt;span style="color:#f92672">.&lt;/span>draw() &lt;span style="color:#75715e"># This will fail, as `draw` has been replaced in this scope.&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="indirection-">Indirection 🔀&lt;/h2>&lt;p>The &lt;a href="https://en.wikipedia.org/wiki/Fundamental_theorem_of_software_engineering">Fundemental Theorem of Software Engineering (FTSE)&lt;/a> says that any problem can be solved by adding another level of indirection. Let&amp;rsquo;s see how this applies to our problem.&lt;/p>&lt;p>As mentioned in the interlude, our main issue is that of naming. Our extension method is bound to a name, and that name can be overriden in the scope that defines it. If that happens, we lose our extension method. To solve that, we&amp;rsquo;ll add another level of indirection - a scope that can safely hold our extension methods and protect them from being overriden. If you read our &lt;a href="https://blog.tamir.dev/posts/snake-eyes-scopes-and-iife">previous post&lt;/a> you might recall that classes are wonderful for scopes. So we&amp;rsquo;ll use a class.&lt;/p>&lt;p>Our new syntax will look like this:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#a6e22e">@extension&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ExtensionMethods&lt;/span>(Square): &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">draw&lt;/span>(self): draw_square(self)&lt;/code>&lt;/pre>&lt;/div>&lt;p>While we&amp;rsquo;re still using a decorator, you may notice that it takes no parameters. Instead, we use the extended type as the base type for our extension class. This allows us to write the extensions like any other subclass, with standard Python syntax, and then use the decorator to install the extensions in it.&lt;/p>&lt;p>Since we&amp;rsquo;ve already gone over the principles behind the construction of the decorator, let&amp;rsquo;s jump straight to the code and focus on the differences from the previous version:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">extension&lt;/span>(scope_cls): &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">_default&lt;/span>(_obj, _name): &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">AttributeError&lt;/span>() &lt;span style="color:#75715e"># (1)&lt;/span> cls &lt;span style="color:#f92672">=&lt;/span> scope_cls&lt;span style="color:#f92672">.&lt;/span>__base__ original_getattr &lt;span style="color:#f92672">=&lt;/span> getattr(cls, &lt;span style="color:#e6db74">&amp;#39;__getattr__&amp;#39;&lt;/span>, _default) &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">_getattr&lt;/span>(obj, name): &lt;span style="color:#66d9ef">with&lt;/span> suppress(&lt;span style="color:#a6e22e">AttributeError&lt;/span>): &lt;span style="color:#66d9ef">return&lt;/span> original_getattr(obj, name) &lt;span style="color:#75715e"># (2)&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> hasattr(scope_cls, name): &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">AttributeError&lt;/span>() &lt;span style="color:#75715e"># (3)&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> _is_in_scope(scope_cls): &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">AttributeError&lt;/span>() &lt;span style="color:#75715e"># (4)&lt;/span> f &lt;span style="color:#f92672">=&lt;/span> getattr(scope_cls, name) &lt;span style="color:#66d9ef">return&lt;/span> functools&lt;span style="color:#f92672">.&lt;/span>partial(f, obj) cls&lt;span style="color:#f92672">.&lt;/span>__getattr__ &lt;span style="color:#f92672">=&lt;/span> _getattr &lt;span style="color:#66d9ef">return&lt;/span> scope_cls&lt;/code>&lt;/pre>&lt;/div>&lt;p>First, you can see that there is no nested decorator - only the main one. And, as we mentioned before, we use inheritance to indicate which type we&amp;rsquo;re extending. So in &lt;strong>(1)&lt;/strong> we access the base-class of our extension class to get the class we&amp;rsquo;re extending. Then, in &lt;strong>(2)&lt;/strong> we check whether the requested attribute exists in our extension class. As you can see, the changes are pretty simple and straight-forward. In &lt;strong>(3)&lt;/strong> we make the most important change - we check for the extension class in the scope, not the extension methods. This is the core of this change! And lastly, in &lt;strong>(4)&lt;/strong>, we get the required attribute from out extension class.&lt;/p>&lt;p>And with that, we&amp;rsquo;re done.&lt;/p>&lt;h2 id="final-words">Final Words&lt;/h2>&lt;p>I hope you enjoyed this article. Regardless of that, I hope you never use it in production code.&lt;/p></description></item><item><title>Snake Eyes: Scopes and IIFE</title><link>https://blog.tamir.dev/posts/snake-eyes-scopes-and-iife/</link><pubDate>Fri, 27 Dec 2019 00:00:00 +0000</pubDate><guid>https://blog.tamir.dev/posts/snake-eyes-scopes-and-iife/</guid><description>&lt;p>One of my pet peeves is taking concepts from other languages and &amp;ldquo;translating&amp;rdquo; them to Python. Not because it makes good code, but because it&amp;rsquo;s a challenge and it makes me happy.&lt;/p>&lt;p>This time, I&amp;rsquo;ve gone after two simple concepts - nested code blocks and IIFE. Both serve similar purposes, and both are missing from Python.&lt;/p>&lt;p>In C++, blocks are often used to limits the lifetime of objects and keep them out of our way when we&amp;rsquo;re done with them. In Python, lifetime is usually less of a concern (as we replace &lt;a href="https://en.cppreference.com/w/cpp/language/raii">RAII&lt;/a> and &lt;a href="https://en.cppreference.com/w/cpp/language/destructor">destructors&lt;/a> with &lt;a href="https://docs.python.org/3/reference/datamodel.html#context-managers">context-managers&lt;/a>), but having variable names out of our way is desirable.&lt;/p>&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Immediately_invoked_function_expression">IIFE&lt;/a> offers us a bit more in terms of functionality, as it both creates a scope for our operations, and allows us to get a value from that scope. This is useful both for simpler flow control, and for easily initializing const-qualified variables.&lt;/p>&lt;p>Python does not have any of those constructs. There is no way to create a nested code-block in Python (adding another level of indentation would just have it complain about unexpected-indent), and while lambdas exist, they only allow for a single expression, making them mostly irrelevant for IIFE. On the other hand, Python offers us two wonderful constructs that can be used virtually everywhere - classes and functions.&lt;/p>&lt;h2 id="classes--nested-blocks-">Classes &amp;amp; Nested Blocks 🧱🧱🧱&lt;/h2>&lt;p>In Python, both classes and functions can be nested. You can define a class inside a class, a function in a function, a class in a function or a function in a class. It is all the same. What&amp;rsquo;s more - you can have flow-control in both function (well, obviously) and class bodies (meta-programming much?). Additionally, both nested functions and nested classes create new variable scopes, keeping their insides inside, and are also closures, capable of capturing values from their enclosing scopes. As such, they are the perfect tools for our language-bending shenanigans.&lt;/p>&lt;p>First, nested code blocks. I offer you the following solution:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>(x): print(&lt;span style="color:#e6db74">&amp;#39;Classes are great for creating blocks.&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>: y &lt;span style="color:#f92672">=&lt;/span> x &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;y = &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>y&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>) print(&lt;span style="color:#e6db74">&amp;#39;y is not defined here.&amp;#39;&lt;/span>) yf(&lt;span style="color:#ae81ff">21&lt;/span>)&lt;/code>&lt;/pre>&lt;/div>&lt;p>By defining a class, we create a new scope. Inside it, we can do whatever we want, knowing that the code will get execute inline and in order, and the results will not leak into the enclosing scope.&lt;/p>&lt;p>That said - there are some caveats. First, the class remains in scope, and so do all the variables defined in it. They cannot be garbage collected until the function terminates. You can verify it yourself by trying to access &lt;code>_.y&lt;/code> in the above example. To remedy that, we need to get rid of the class, or at least its contents. There are many ways to achieve it:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#75715e"># Replace the class with a bool&lt;/span>&lt;span style="color:#a6e22e">@bool&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>: x &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> print(x)&lt;span style="color:#75715e"># Replace the class with None&lt;/span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">empty&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>args): &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span>&lt;span style="color:#a6e22e">@empty&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>: x &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> print(x)&lt;span style="color:#75715e"># Use a metaclass to delete all the variables inside the class&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">BlockMeta&lt;/span>(type): &lt;span style="color:#66d9ef">def&lt;/span> __new__(cls, name, bases, dict_): &lt;span style="color:#66d9ef">return&lt;/span> super()&lt;span style="color:#f92672">.&lt;/span>__new__(cls, name, bases, {})&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Block&lt;/span>(metaclass&lt;span style="color:#f92672">=&lt;/span>BlockMeta): &lt;span style="color:#66d9ef">pass&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>(Block): x &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> print(x)&lt;/code>&lt;/pre>&lt;/div>&lt;p>I am personally torn between the meta-class approach, as it is explicit and clear, and the &lt;code>@bool&lt;/code> approach, as it requires to additional boilerplate.&lt;/p>&lt;p>The second issue with classes as blocks is that while they can be nested freely, a nested class cannot access the variables of its nesting class, rendering block-nesting moot. I do not have a solution for that at present.&lt;/p>&lt;h2 id="functions--iife-">Functions &amp;amp; IIFE 🐍🐍🐍&lt;/h2>&lt;p>With a solution for nested blocks in hand, it is time to get proper IIFE in Python. For that, we&amp;rsquo;ll naturally be using function. Along with those, we&amp;rsquo;ll use a function&amp;rsquo;s best friend - the decorator!&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">iife&lt;/span>(f): &lt;span style="color:#66d9ef">return&lt;/span> f()&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">describe_number&lt;/span>(n): &lt;span style="color:#a6e22e">@iife&lt;/span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">message&lt;/span>(): &lt;span style="color:#66d9ef">if&lt;/span> n &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>: &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>n&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> is smaller than 0&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">elif&lt;/span> n &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>: &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>n&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> is larger than 0&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>n&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> is 0&amp;#39;&lt;/span> print(message)describe_number(&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)describe_number(&lt;span style="color:#ae81ff">0&lt;/span>)describe_number(&lt;span style="color:#ae81ff">1&lt;/span>)&lt;/code>&lt;/pre>&lt;/div>&lt;p>Using the decorator, we immediately call the function, binding the function&amp;rsquo;s name to the return value instead of the function itself. A function returning &lt;code>None&lt;/code> (or without a return statement) will just bind the name to &lt;code>None&lt;/code>.&lt;/p>&lt;p>While this looks a bit more messy, it can also double as a solution for nested blocks. And unlike the class solution - it can be freely nested.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">iife&lt;/span>(f): &lt;span style="color:#66d9ef">return&lt;/span> f()&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">block&lt;/span>(f): f()&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>(x): print(&lt;span style="color:#e6db74">&amp;#39;Functions are great for creating blocks.&amp;#39;&lt;/span>) &lt;span style="color:#a6e22e">@block&lt;/span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>(): my_x &lt;span style="color:#f92672">=&lt;/span> x &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#a6e22e">@iife&lt;/span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span>(): &lt;span style="color:#66d9ef">return&lt;/span> my_x &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#a6e22e">@block&lt;/span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>(): print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;y = &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>y&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>) print(&lt;span style="color:#e6db74">&amp;#39;y is not defined here.&amp;#39;&lt;/span>) yf(&lt;span style="color:#ae81ff">20&lt;/span>)&lt;/code>&lt;/pre>&lt;/div>&lt;p>That&amp;rsquo;s it for today. I hope you had some fun.&lt;/p></description></item><item><title>Recognizing Ducks</title><link>https://blog.tamir.dev/posts/recognizing-ducks/</link><pubDate>Sat, 13 Oct 2018 00:00:00 +0000</pubDate><guid>https://blog.tamir.dev/posts/recognizing-ducks/</guid><description>&lt;p>After multiple attempts at finding a funny narrative that holds for the entire article and failing miserably, I decided to go with the technical parts alone. Enough of my colleagues found it interesting, so I guess it will hold up without the jokes.&lt;/p>&lt;p>Python gives us multiple ways to check that the objects we pass to functions are of the types we expect. Each method has its advantages and disadvantages.&lt;/p>&lt;h2 id="just-not-caring">Just not caring&lt;/h2>&lt;p>The first option is naturally to not care about types - just write your code, and hope for the best.This is a viable method, and is often employed. It is especially fitting in short snippets or scripts you don&amp;rsquo;t expect to maintain much. It just works with no overhead whatsoever.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">poke&lt;/span>(duck): duck&lt;span style="color:#f92672">.&lt;/span>quack() duck&lt;span style="color:#f92672">.&lt;/span>walk()&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="inheritance">Inheritance&lt;/h2>&lt;p>Another option, as common in OOP languages, is to use inheritance. We can define an &lt;code>Anas&lt;/code> class, and expect all of its derivatives to be sufficiently duck-like.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Anas&lt;/span>: &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">quack&lt;/span>(self): &lt;span style="color:#66d9ef">pass&lt;/span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">walk&lt;/span>(self): &lt;span style="color:#66d9ef">pass&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Duck&lt;/span>(Anas): &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">quack&lt;/span>(self): print(&lt;span style="color:#e6db74">&amp;#39;Quack!&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">walk&lt;/span>(self): print(&lt;span style="color:#e6db74">&amp;#39;Walks like duck.&amp;#39;&lt;/span>)&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Mallard&lt;/span>(Anas): &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">quack&lt;/span>(self): print(&lt;span style="color:#e6db74">&amp;#39;Quack!&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">walk&lt;/span>(self): print(&lt;span style="color:#e6db74">&amp;#39;Walks like duck.&amp;#39;&lt;/span>)&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">poke&lt;/span>(duck): &lt;span style="color:#66d9ef">assert&lt;/span> isinstance(duck, Anas)&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="interfaces">Interfaces&lt;/h2>&lt;p>While inheritance kinda gets the job done, a robotic duck is definitely not of the genus &lt;a href="https://en.wikipedia.org/wiki/Anas">Anas&lt;/a>, while it does implement all the characteristics we care about. So instead of hierarchical inheritance, we can use interfaces.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">from&lt;/span> abc &lt;span style="color:#f92672">import&lt;/span> ABC, abstractmethod&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">IDuck&lt;/span>(ABC): &lt;span style="color:#a6e22e">@abstractmethod&lt;/span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">quack&lt;/span>(self): &lt;span style="color:#66d9ef">pass&lt;/span> &lt;span style="color:#a6e22e">@abstractmethod&lt;/span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">walk&lt;/span>(self): &lt;span style="color:#66d9ef">pass&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Duck&lt;/span>(IDuck): &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">quack&lt;/span>(self): print(&lt;span style="color:#e6db74">&amp;#39;Quack!&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">walk&lt;/span>(self): print(&lt;span style="color:#e6db74">&amp;#39;Walks like duck.&amp;#39;&lt;/span>)&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">RoboticDuck&lt;/span>(IDuck): &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">quack&lt;/span>(self): print(&lt;span style="color:#e6db74">&amp;#39;Quack!&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">walk&lt;/span>(self): print(&lt;span style="color:#e6db74">&amp;#39;Walks like duck.&amp;#39;&lt;/span>)&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">poke&lt;/span>(duck): &lt;span style="color:#66d9ef">assert&lt;/span> isinstance(duck, IDuck)&lt;/code>&lt;/pre>&lt;/div>&lt;p>Great. And if we don&amp;rsquo;t control the types, we can always write adapters.&lt;/p>&lt;h2 id="the-duck-test">The Duck Test&lt;/h2>&lt;p>But this is Python. We can do better.&lt;/p>&lt;p>As we know, Python uses duck-typing. So we should be able to use the &lt;a href="https://en.wikipedia.org/wiki/Duck_test">Duck Test&lt;/a> for types. In our example, every object implementing &lt;code>quack()&lt;/code> and &lt;code>walk()&lt;/code> is a duck. That&amp;rsquo;s easy enough to check.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">is_a_duck&lt;/span>(duck): &lt;span style="color:#66d9ef">for&lt;/span> attr &lt;span style="color:#f92672">in&lt;/span> (&lt;span style="color:#e6db74">&amp;#39;quack&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;walk&amp;#39;&lt;/span>): &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> hasattr(duck, attr): &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">poke&lt;/span>(duck): &lt;span style="color:#66d9ef">assert&lt;/span> is_a_duck(duck) duck&lt;span style="color:#f92672">.&lt;/span>quack() duck&lt;span style="color:#f92672">.&lt;/span>walk()&lt;/code>&lt;/pre>&lt;/div>&lt;p>This works. But we list the &lt;code>isinstance(...)&lt;/code> call. We can surely do better.&lt;/p>&lt;h2 id="metaclasses--subclass-hooks">Metaclasses &amp;amp; Subclass Hooks&lt;/h2>&lt;p>Metaclasses are wonderful constructs. As their name may suggest, they take part in the construction of classes. They even allow us to set hooks into basic Python mechanisms, like &lt;code>isinstance(...)&lt;/code>, using &lt;a href="https://docs.python.org/3/library/abc.html#abc.ABCMeta.__subclasshook__">&lt;code>__subclasshook__&lt;/code>&lt;/a>.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">from&lt;/span> abc &lt;span style="color:#f92672">import&lt;/span> ABC&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">is_a_duck&lt;/span>(duck): &lt;span style="color:#66d9ef">for&lt;/span> attr &lt;span style="color:#f92672">in&lt;/span> (&lt;span style="color:#e6db74">&amp;#39;quack&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;walk&amp;#39;&lt;/span>): &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> hasattr(duck, attr): &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">DuckChecker&lt;/span>(ABC): &lt;span style="color:#a6e22e">@classmethod&lt;/span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">__subclasshook__&lt;/span>(cls, C): &lt;span style="color:#66d9ef">if&lt;/span> cls &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#f92672">not&lt;/span> DuckChecker: &lt;span style="color:#66d9ef">return&lt;/span> NotImplemented &lt;span style="color:#66d9ef">return&lt;/span> is_a_duck(C)&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">poke&lt;/span>(duck): &lt;span style="color:#66d9ef">assert&lt;/span> isinstance(duck, DuckChecker) duck&lt;span style="color:#f92672">.&lt;/span>quack() duck&lt;span style="color:#f92672">.&lt;/span>walk()&lt;/code>&lt;/pre>&lt;/div>&lt;p>And we&amp;rsquo;re back in business. That said, &lt;code>is_a_duck&lt;/code> is still a stringly-typed mess, and gonna be very painful to maintain.&lt;/p>&lt;p>Wouldn&amp;rsquo;t it be nice if we could just use our &lt;code>IDuck&lt;/code> interface to check for duck-ness?&lt;/p>&lt;h2 id="abstract-methods-again">Abstract Methods, Again!&lt;/h2>&lt;p>Lucky for us - we can!&lt;/p>&lt;p>Among other things, the &lt;code>ABC&lt;/code> parent class enumerates all &lt;code>@abstractmethod&lt;/code>s and stores them in the &lt;code>__abstractmethods__&lt;/code> member variable. This means that we can easily enumerate them in our subclass hook and check for them.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">from&lt;/span> abc &lt;span style="color:#f92672">import&lt;/span> ABC, abstractmethod&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">IDuck&lt;/span>(ABC): &lt;span style="color:#a6e22e">@abstractmethod&lt;/span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">quack&lt;/span>(self): &lt;span style="color:#66d9ef">pass&lt;/span> &lt;span style="color:#a6e22e">@abstractmethod&lt;/span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">walk&lt;/span>(self): &lt;span style="color:#66d9ef">pass&lt;/span> &lt;span style="color:#a6e22e">@classmethod&lt;/span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">__subclasshook__&lt;/span>(cls, C): &lt;span style="color:#66d9ef">if&lt;/span> cls &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#f92672">not&lt;/span> IDuck: &lt;span style="color:#66d9ef">return&lt;/span> NotImplemented &lt;span style="color:#66d9ef">for&lt;/span> attr &lt;span style="color:#f92672">in&lt;/span> cls&lt;span style="color:#f92672">.&lt;/span>__abstractmethods__: &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> hasattr(C, attr): &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Duck&lt;/span>: &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">quack&lt;/span>(self): print(&lt;span style="color:#e6db74">&amp;#39;Quack!&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">walk&lt;/span>(self): print(&lt;span style="color:#e6db74">&amp;#39;Walks like a duck.&amp;#39;&lt;/span>)&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">poke&lt;/span>(duck): &lt;span style="color:#66d9ef">assert&lt;/span> isinstance(duck, IDuck) duck&lt;span style="color:#f92672">.&lt;/span>quack() duck&lt;span style="color:#f92672">.&lt;/span>walk()poke(Duck()) &lt;span style="color:#75715e"># Quack!&lt;/span> &lt;span style="color:#75715e"># Walks like a duck.&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Awesome. Next step - separating the interface from the checking logic.&lt;/p>&lt;h2 id="protocols">Protocols&lt;/h2>&lt;p>Reading through Python documentation and nomenclature, you might have seen the term &amp;ldquo;protocol&amp;rdquo; here and there. It is Python&amp;rsquo;s way to call duck-typed interfaces. So you could say we just created a &amp;ldquo;protocol checker&amp;rdquo;. Now, we can separate it into a base-class.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">from&lt;/span> abc &lt;span style="color:#f92672">import&lt;/span> ABC, abstractmethod&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Protocol&lt;/span>(ABC): _is_protocol &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span> &lt;span style="color:#a6e22e">@classmethod&lt;/span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">__subclasshook__&lt;/span>(cls, C): &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> cls&lt;span style="color:#f92672">.&lt;/span>_is_protocol: &lt;span style="color:#66d9ef">return&lt;/span> NotImplemented &lt;span style="color:#66d9ef">for&lt;/span> attr &lt;span style="color:#f92672">in&lt;/span> cls&lt;span style="color:#f92672">.&lt;/span>__abstractmethods__: &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> hasattr(C, attr): &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">IDuck&lt;/span>(Protocol): &lt;span style="color:#a6e22e">@abstractmethod&lt;/span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">quack&lt;/span>(self): &lt;span style="color:#66d9ef">pass&lt;/span> &lt;span style="color:#a6e22e">@abstractmethod&lt;/span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">walk&lt;/span>(self): &lt;span style="color:#66d9ef">pass&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And that&amp;rsquo;s it. That little &lt;code>_is_protocol&lt;/code> flag is there for good reason. Usually, we&amp;rsquo;d check protocol-ness using &lt;code>isinstance(...)&lt;/code>. In this case, however, we&amp;rsquo;re hooking into that mechanism and that would lead to infinite recursion.&lt;/p>&lt;p>We can now use our &lt;code>Protocol&lt;/code> base-class freely to create new protocols as we need them, with friendly interface-like syntax. We&amp;rsquo;re almost done.&lt;/p>&lt;h2 id="this-dog-is-a-duck">This Dog is a Duck&lt;/h2>&lt;p>In some cases, the protocol checks may not be what we want. The obvious reasons coming to mind are:&lt;/p>&lt;ol>&lt;li>We can&amp;rsquo;t really check the desired semantics using the protocol trick.&lt;/li>&lt;li>We want to wreck havoc.&lt;/li>&lt;/ol>&lt;p>For those cases (well, mostly for the first one) the &lt;code>ABC&lt;/code> base class provides another trick. Instead of defining &lt;code>__subclasshook__&lt;/code> to check the interface, we can simple register classes as valid, &amp;ldquo;virtual subclasses&amp;rdquo;.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">from&lt;/span> abc &lt;span style="color:#f92672">import&lt;/span> ABC&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">IDuck&lt;/span>(ABC): &lt;span style="color:#66d9ef">pass&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Duck&lt;/span>: &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">quack&lt;/span>(self): print(&lt;span style="color:#e6db74">&amp;#39;Quack!&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">walk&lt;/span>(self): print(&lt;span style="color:#e6db74">&amp;#39;Walk like a duck.&amp;#39;&lt;/span>)IDuck&lt;span style="color:#f92672">.&lt;/span>register(Duck)&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">poke&lt;/span>(duck): &lt;span style="color:#66d9ef">assert&lt;/span> isinstance(duck, IDuck) duck&lt;span style="color:#f92672">.&lt;/span>quack() duck&lt;span style="color:#f92672">.&lt;/span>walk()&lt;/code>&lt;/pre>&lt;/div>&lt;p>Remember that this method puts all the pressure on the programmer. Writing &lt;code>IDuck.register(Dog)&lt;/code> is the equivalent of saying &amp;ldquo;I vouch for this dog to be a duck&amp;rdquo;. It might pass inspection, but won&amp;rsquo;t necessarily yield the desired results.&lt;/p>&lt;h2 id="summary">Summary&lt;/h2>&lt;p>In this article we covered multiple ways of checking the &amp;ldquo;duck-ness&amp;rdquo; of objects. From belonging to the Anas genus, to just placing a sticker on their head saying &amp;ldquo;Duck!&amp;rdquo;. Some of those methods are more useful or applicable than others, but I still think it worthwhile to be familiar with all of them. Additionally, there are many topics not covered here, like static type checking.&lt;/p>&lt;h3 id="further-reading">Further Reading&lt;/h3>&lt;p>The metaclass techniques demonstrated here are simplified versions of code from the &lt;a href="https://docs.python.org/3/library/abc.html">&lt;code>abc&lt;/code>&lt;/a> and &lt;a href="https://docs.python.org/3/library/typing.html">&lt;code>typing&lt;/code>&lt;/a> modules. I highly recommend going through those modules and their respective docs, at least at a glance, to extend your knowledge and cover up any holes left by my hand-wavy explanation.&lt;/p></description></item><item><title>Working Across Time-Zones</title><link>https://blog.tamir.dev/posts/working-across-timezones/</link><pubDate>Sat, 09 Jun 2018 00:00:00 +0000</pubDate><guid>https://blog.tamir.dev/posts/working-across-timezones/</guid><description>&lt;p>Internationalization is a difficult problem is software-engineering. Usually that statement would refer to the technical aspects of providing a good user experience for your customers. Today, however, I am referring to the social aspects.&lt;/p>&lt;p>Just as it has become common-place to have your users spread across the globe, so it has with developers. It is not uncommon to work with teams in another country, or even to have a specific team-member working from a remote location. Being able to cooperate with developers across the globe is a great enabler. But as the case is with - well - everything, it has some obvious - and some less obvious - pitfalls to avoid.&lt;/p>&lt;h2 id="where-when-are-my-colleagues">Where (When?) Are My Colleagues?&lt;/h2>&lt;p>First and foremost - know the time-zones your colleagues reside in.&lt;/p>&lt;p>You already know that some of your teammates tend to arrive a bit early or a bit late. You know it, and you adjust to it. You won&amp;rsquo;t make a colleague who starts 2 hours before you stay for a meeting when you know they should be picking up their kids from kindergarten, right?&lt;/p>&lt;p>Well, all you need to do now is adjust to having teammates arriving at work 10 hours before you.&lt;/p>&lt;h2 id="time-for-your-12am-daily-standup">Time For Your 12AM Daily Standup&lt;/h2>&lt;p>Yes, that&amp;rsquo;s AM. The one that&amp;rsquo;s confusingly set at midnight.&lt;/p>&lt;p>Now imagine that you&amp;rsquo;re in a UTC-07:00 time-zone (Pacific Daylight Time) and the rest of your team is in a UTC+03:00 time-zone (Israel Daylight Time). Your daily-standup is at 10AM, which sounds reasonable. But that&amp;rsquo;s in Israel. Sadly, this translates to 12AM for you. But you can accommodate that, can&amp;rsquo;t you?&lt;/p>&lt;p>Luckily, in the real-world company HQs tend to be in the USA, not Israel. So you&amp;rsquo;re safe. You can hold your meetings at any time &lt;em>you&lt;/em> want, and they&amp;rsquo;ll have to adjust. You can have them wake up early, or stay up late, or just work very awkward shifts. They&amp;rsquo;ll accommodate. But do you really want to make your teammates do that?&lt;/p>&lt;h2 id="get-it-done-by-eod-today">Get It Done By EOD Today&lt;/h2>&lt;p>No.&lt;/p>&lt;p>It&amp;rsquo;s not that I don&amp;rsquo;t want to, it simply isn&amp;rsquo;t possible.&lt;/p>&lt;p>If you have a large enough time-difference (say, 6 hours difference over a 9 hours work-day) your day starts when your colleagues' day ends (or later!)&lt;/p>&lt;p>No matter how hard they work, they cannot get it done by EOD if EOD has already passed. You can talk about getting things done &amp;ldquo;by tomorrow&amp;rdquo;, but not EOD. It causes un-needed tension as the need to explain this comes up over and over during planning meetings.&lt;/p>&lt;h2 id="planned-downtime-9pm-6am">Planned Downtime: 9PM-6AM&lt;/h2>&lt;p>Great. You&amp;rsquo;ve just killed of a day&amp;rsquo;s work for your distant colleagues. 9PM San-Francisco is 7AM in Tel-Aviv. Making it a 7AM-4PM downtime for them.&lt;/p>&lt;p>I&amp;rsquo;m not saying you can&amp;rsquo;t do that, but you should try and keep that in mind.&lt;/p>&lt;h2 id="and-then-theres-israel">And Then, There&amp;rsquo;s Israel&lt;/h2>&lt;blockquote>&lt;p>And on the seventh day God ended His work which He had done, and He rested on the seventh day from all His work which He had done.&lt;/p>&lt;p>Then God blessed the seventh day and sanctified it, because in it He rested from all His work which God had created and made.&lt;/p>&lt;/blockquote>&lt;p>&lt;em>Genesis 2:2-3&lt;/em>&lt;/p>&lt;p>And so in Israel we rest on the &lt;em>7th&lt;/em> day, and add the 6th in for good measure.&lt;/p>&lt;p>We work Sunday through Thursday, and rest on Friday and Saturday. And this is annoying.&lt;/p>&lt;p>It is annoying when we need support on Sunday and have to wait.&lt;/p>&lt;p>It is annoying when we travel, and are never sure if we should report Friday as overtime, or Sunday as a day off.&lt;/p>&lt;p>And it is annoying to be expected to work on Friday evening just because it&amp;rsquo;s a working-day for you. You wouldn&amp;rsquo;t want to work Saturday nights, would you? I didn&amp;rsquo;t think so.&lt;/p>&lt;p>Also, you should expect email send on Fridays and late Thursdays to be ignored until Sunday.&lt;/p>&lt;h2 id="in-conclusion">In Conclusion&lt;/h2>&lt;p>This has been a bit of a rant, and a bit of advice as well. I&amp;rsquo;m not sure which dominated the tone.&lt;/p>&lt;p>This might seem like a minor issue, but it can cause a great deal of pain when ignored.&lt;/p>&lt;p>But in the end, the rules are simple. All you need to do is be aware, and be considerate. You can do it for the people you physically see everyday, and you can do it for your remote colleagues.&lt;/p>&lt;p>Try and set your long-distance meeting at times suitable for both ends. And when that isn&amp;rsquo;t possible - make sure you make an effort as well. Waking up an hour earlier every now and then goes a long way.&lt;/p></description></item><item><title>Adventures in Rust</title><link>https://blog.tamir.dev/posts/adventures-in-rust/</link><pubDate>Fri, 27 Apr 2018 00:00:00 +0000</pubDate><guid>https://blog.tamir.dev/posts/adventures-in-rust/</guid><description>&lt;p>In the few years since Rust came out, I&amp;rsquo;ve frequently found myself explaining what an amazing language Rust is. Laying out the ways in which it is going to change the systems-programming world, and what a pleasure Rust is to code in.&lt;/p>&lt;p>A few months back, I finally got around to trying it out. It was horrid. The darned borrow-checker just wouldn&amp;rsquo;t let me do anything. I couldn&amp;rsquo;t get anything meaningful to compile. Despite years of programming in various languages I felt completely incompetent to handle it. I resolved to drop Rust and focus on other things.&lt;/p>&lt;p>Despite my initial disappointment and discouragement, I still could not get Rust out of my head. Its premise is too promising to put down after one go. Besides, I cannot be beaten by a programming language! And yet, it can wait. It is too much work for now. Some day, maybe in a few years, I&amp;rsquo;ll write Rust.&lt;/p>&lt;p>Using Rust, however, is a completely different experience. Rust tools are absolutely amazing. As a Windows user through-and-through I got used to open-source tools (especially command line tools) not being supported on Windows. (No, cygwin is not a valid solution.) I don&amp;rsquo;t blame the devs - they work on Linux. Even if they have the time to spend on the Windows port, they don&amp;rsquo;t necessarily have a Windows machine to test it on. And yet - I am used to being disappointed. That is why, when I first heard of &lt;a href="https://github.com/BurntSushi/ripgrep">&lt;code>rg&lt;/code>&lt;/a>(an amazing &lt;code>grep&lt;/code> replacement) and &lt;a href="https://github.com/sharkdp/fd">&lt;code>fd&lt;/code>&lt;/a>(an amazing &lt;code>find&lt;/code> replacement) I &lt;em>knew&lt;/em> that they would not work on Windows. But, being my optimistic self - I checked. And a good thing I did that.&lt;/p>&lt;p>To install Rust tools, the easiest way is to install the Rust toolset and compile them. A daunting task in every other language, yet a breeze in Rust.&lt;/p>&lt;ol>&lt;li>Head over to &lt;a href="https://rustup.rs/">rustup.rs&lt;/a> and install Rust(A single command-line on Linux, a single executable on Windows)&lt;/li>&lt;li>&lt;code>cargo install ripgrep fd-find&lt;/code>&lt;/li>&lt;li>That&amp;rsquo;s it. Really. Now use the tools.&lt;/li>&lt;/ol>&lt;p>This was when I realized how amazing Rust really is. Even if you ignore the language completely - it&amp;rsquo;s tooling and package management is unparalleled. Having published Python packages in the past, I was amazed at the simple publishing and installation mechanisms. Having used C and C++ I was simply amazed at a systems-programming with package management. So while still somewhat scared of the borrow-checker, I decided that my next CLI tool will be written in Rust. The easy-as-pie deployment bought be over completely.&lt;/p>&lt;p>Some months after that, I finally found myself in need of a new CLI tool. I was faced with a continuous log I wanted to filter for duplicates. &lt;code>sort -u&lt;/code> sorts, so it cannot work on streams. Of course, there is probably some &lt;code>sed&lt;/code> or &lt;code>awk&lt;/code> magic I can use, but I want something simple. Besides, a tool that filters out duplicates seems like the perfect beginner project for getting hands-on with Rust. So I went ahead and creates &lt;a href="https://crates.io/crates/uq">&lt;code>uq&lt;/code>&lt;/a>. After finishing it, I published it on &lt;a href="https://crates.io/">crates.io&lt;/a>. &lt;code>cargo install uq&lt;/code> on a second machine, and it worked. Both Windows and Linux. A friend tried it, and it simply worked! I never had such a pleasant deployment experience. It is practically easier to install from source then send a compiled binary! And it works cross-platform out of the box.&lt;/p>&lt;p>A short while later I wanted to group some log entries by a regex. I looked around and could not find a simple way to do it. So, once again, I turned to Rust. Some borrow-checker-wrestling later and the first version of &lt;a href="https://crates.io/crates/groupby">&lt;code>groupby&lt;/code>&lt;/a> was complete. Yay!&lt;/p>&lt;p>A short time later I had one of the best open-source experiences I&amp;rsquo;ve ever had. Someone started using &lt;code>groupby&lt;/code>, looked at my terrible code, and posted &lt;a href="https://github.com/lostutils/groupby/issues/1">this issue&lt;/a>:&lt;/p>&lt;blockquote>&lt;p>Hello&lt;/p>&lt;p>I find this little program will be useful for many things I do (I usually do something like that with combination of sed, sort, …). I also looked into the code. Do I guess right that you&amp;rsquo;re still learning Rust? Could I provide few little tips?&lt;/p>&lt;p>I glimpsed at least one unwrap that can be triggered by the user input (giving a too large group ID), which will result in ugly error message instead of nice useful one.Do you choose BTreeMap/BTreeSet for some specific reason? Is it the order of elements? If not, HashMap and HashSet are likely to be faster.Both variants (unique vs all) look very similar and differ only in the inner data type and the method used to push/insert. I think this could be done with just one piece of code that is generic over the type, and adding your own trait that implements the adding for either. Would you like me to show you such code?&lt;/p>&lt;/blockquote>&lt;p>Having someone more experienced in Rust come in and help me improve my very naïve code was great. And it was my first time getting a &amp;ldquo;this is great, may I help you?&amp;rdquo; comment and not a &amp;ldquo;this is great, I want this as well&amp;rdquo; one.&lt;/p>&lt;p>For the time being, I keep spending more time wrestling the borrow-checker than writing actual code in Rust. But I am (almost) sure it is due to lack of experience. On the plus-side, I&amp;rsquo;m becoming better at detecting lifetime issues in other languages as well.&lt;/p>&lt;p>So, for anyone who hasn&amp;rsquo;t done it yet, I highly recommend using Rust-based tools. Just for the amazing experience of things working (and compiling!) out of the box. Later, if you choose to actually code in it, be sure to brace yourself for a somewhat bumpy ride. Friends tell me that after a time Rust becomes easier, speeding up their development. I&amp;rsquo;m not there yet, but I&amp;rsquo;m working on it.&lt;/p></description></item><item><title>Types of Loops</title><link>https://blog.tamir.dev/posts/types-of-loops/</link><pubDate>Sat, 27 Jan 2018 00:00:00 +0000</pubDate><guid>https://blog.tamir.dev/posts/types-of-loops/</guid><description>&lt;p>Recently I&amp;rsquo;ve been helping &amp;amp; tutoring some true code beginners. Not someone new to a language, but completely new to programming.&lt;/p>&lt;p>I&amp;rsquo;ve done a lot of training in the past. Both beginner and advanced training, both programming and reverse-engineering. But as green as my previous students have been, they have always had some prior knowledge, some experience with code. In at least one programming language.&lt;/p>&lt;p>Usually the training is about teaching language features, special tricks, best practices, and getting the trainees familiar with the new patterns. The trainees send out probes, looking for familiar things, and I just fill them in at the right time. They know what they are looking for, or can be easily guided towards the right thing. When people are completely green, they don&amp;rsquo;t.&lt;/p>&lt;p>This is a very new experience for me, and it got me thinking a lot about programming and the ways we approach code. The patterns we seek to find or form. The amazing number of things that we do without even thinking as experience programmers. Each of those, no matter how simple, needs to be broken up and explained to new-comers. They have no previous knowledge to build upon for this.&lt;/p>&lt;p>From my current experience, it seems the understanding the meaning of syntax, and understanding forward-flowing programs is easy enough. Conditionals are a non-issue. The first road-block comes with loops. Especially writing loops. Where do I put the return statement? Where do I define my variables?Trying to explain those things, and give simple rules, I came to some useful realizations of useful patterns, and some painful truths about our use of jargon.&lt;/p>&lt;p>Let&amp;rsquo;s go ahead and see the patterns.&lt;/p>&lt;h2 id="find-loops">Find Loops&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">indexOf&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> haystack&lt;span style="color:#f92672">,&lt;/span> String needle&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 0&lt;span style="color:#f92672">;&lt;/span> i &lt;span style="color:#f92672">&amp;lt;&lt;/span> haystack&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">length&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#f92672">++&lt;/span>i&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>needle&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">equals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>haystack&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]))&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> i&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">-&lt;/span>1&lt;span style="color:#f92672">;&lt;/span>&lt;span style="color:#f92672">}&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In those loops we iterate over the array, looking for an item that fulfills our condition. Once we find it, we immediately return that value. There is no need to declare any variables.&lt;/p>&lt;h2 id="count-loops">Count Loops&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">countOf&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> haystack&lt;span style="color:#f92672">,&lt;/span> String needle&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> count &lt;span style="color:#f92672">=&lt;/span> 0&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 0&lt;span style="color:#f92672">;&lt;/span> i &lt;span style="color:#f92672">&amp;lt;&lt;/span> haystack&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">length&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#f92672">++&lt;/span>i&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>needle&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">equals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>haystack&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]))&lt;/span> &lt;span style="color:#f92672">{&lt;/span> count&lt;span style="color:#f92672">++;&lt;/span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> count&lt;span style="color:#f92672">;&lt;/span>&lt;span style="color:#f92672">}&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In those loops we iterate over the array, looking for items that fulfill our condition. Whenever we find one, we increment the count. Once we exhaust the iteration, we return the counter. The counter and return statement are outside the loop.&lt;/p>&lt;h2 id="action-loops">Action Loops&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">printAll&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> haystack&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 0&lt;span style="color:#f92672">;&lt;/span> i &lt;span style="color:#f92672">&amp;lt;&lt;/span> haystack&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">length&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#f92672">++&lt;/span>i&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>haystack&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]);&lt;/span> &lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#f92672">}&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In those loops we iterate over the array, and perform an action on each and every item. There are no variables and no return statements.&lt;/p>&lt;p>Now, those simple loops can do quite a lot, and can be expanded and composed to do more. And I find that they help beginners. But did you spot my error? I used the word &amp;ldquo;iterate&amp;rdquo;.&lt;/p>&lt;h2 id="vocabulary">Vocabulary&lt;/h2>&lt;p>While the meaning of &amp;ldquo;iterate&amp;rdquo; is clear to existing programmers, and looking at the loops you can easily tell that we are iterating or looping over &lt;code>haystack&lt;/code>, it is not clear for beginners. Moreover, the words themselves sound weird. This is critical, and becomes more pronounced as you try and loop in slightly more advanced ways&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 0&lt;span style="color:#f92672">;&lt;/span>&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>Node current &lt;span style="color:#f92672">=&lt;/span> myList&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">head&lt;/span>&lt;span style="color:#f92672">;&lt;/span> current &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span> current &lt;span style="color:#f92672">=&lt;/span> current&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getNext&lt;/span>&lt;span style="color:#f92672">(),&lt;/span> &lt;span style="color:#f92672">++&lt;/span>i&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#75715e">// ...&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">}&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here, we are looping (or iterating) over &lt;code>myList&lt;/code>, but we don&amp;rsquo;t change anything about it, or even access it directly. We do change &lt;code>i&lt;/code> (which is no longer our counter) and &lt;code>current&lt;/code> which is a node. This makes the code and language quite dissonant. &amp;ldquo;We iterate over &lt;code>myList&lt;/code> while maintaining an index&amp;rdquo; is a true statement, but not an immediate translation from the code. The language forces to go in a very roundabout manner. This is true for many languages.But now, consider slightly more modern syntax:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">for&lt;/span> i, node &lt;span style="color:#f92672">in&lt;/span> enumerate(myList): &lt;span style="color:#75715e"># ...&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">node&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">myList&lt;/span> { &lt;span style="color:#75715e">// ...&lt;/span>&lt;span style="color:#75715e">&lt;/span>}&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rust" data-lang="rust">&lt;span style="color:#66d9ef">for&lt;/span> (i, node) &lt;span style="color:#66d9ef">in&lt;/span> myList.enumerate() { &lt;span style="color:#75715e">// ...&lt;/span>&lt;span style="color:#75715e">&lt;/span>}&lt;/code>&lt;/pre>&lt;/div>&lt;p>In all of those, the situation is far clearer. We can see that we&amp;rsquo;re looping over &lt;code>myList&lt;/code>, and it is clear that we have both a node and an index.While this difference might be minor for experienced programmers, it is a world of difference for newcomers.&lt;/p>&lt;p>Learning to code is not just learning a programming language. Not just learning to think in a specific way. It is learning your own language again. You know English? Well, now you need to learn programming-English. You know Hebrew? Learn programming-Hebrew. We keep changing the meaning of existing words, and expect people to follow and understand them. It is hard. The least we can do is try and minimize the difference between the code we read (programming languages - Java, C, C++, Python, Go, Rust&amp;hellip;) and the code we speak (well, I guess English is a programming language as well?).&lt;/p></description></item><item><title>A Functional-Style State Machine in C++, Part 2</title><link>https://blog.tamir.dev/posts/a-functional-style-state-machine-in-cpp-part-2/</link><pubDate>Mon, 04 Sep 2017 00:00:00 +0000</pubDate><guid>https://blog.tamir.dev/posts/a-functional-style-state-machine-in-cpp-part-2/</guid><description>&lt;p>First, an apology.The first part of this post was published on May 26. It is now September. I had most of the code for this part done by then. But finalizing the code took some more effort. Once that was done, explaining took a while. There were quite a few things I had to learn myself first.So now, months later, I present this humble offering to the Gods of C++ and template meta-programming.&lt;/p>&lt;hr>&lt;h2 id="generalizing">Generalizing&lt;/h2>&lt;p>In &lt;a href="https://blog.tamir.dev/posts/a-functional-style-state-machine-in-cpp/">Part 1&lt;/a> we created our &lt;code>State&lt;/code> or &lt;code>SelfReturning&lt;/code> class (provided below for reference). It works, but as you can see - required modifications whenever we change the function arguments or return types.&lt;/p>&lt;p>&lt;a href="https://godbolt.org/g/1XqEhY">Compilation&lt;/a>&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">SelfReturning&lt;/span> { &lt;span style="color:#66d9ef">using&lt;/span> RetType &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>pair&lt;span style="color:#f92672">&amp;lt;&lt;/span>SelfReturning, &lt;span style="color:#66d9ef">const&lt;/span> Context&lt;span style="color:#f92672">&amp;gt;&lt;/span>; &lt;span style="color:#66d9ef">using&lt;/span> FuncType &lt;span style="color:#f92672">=&lt;/span> RetType(&lt;span style="color:#f92672">*&lt;/span>)(&lt;span style="color:#66d9ef">const&lt;/span> Context&lt;span style="color:#f92672">&amp;amp;&lt;/span>, Event); SelfReturning(FuncType func) &lt;span style="color:#f92672">:&lt;/span> _func{func} {}; RetType &lt;span style="color:#a6e22e">operator&lt;/span>()(&lt;span style="color:#66d9ef">const&lt;/span> Context&lt;span style="color:#f92672">&amp;amp;&lt;/span> ctx, Event evt) { &lt;span style="color:#66d9ef">return&lt;/span> _func(ctx, evt); } FuncType _func;};&lt;span style="color:#66d9ef">using&lt;/span> State &lt;span style="color:#f92672">=&lt;/span> SelfReturning;&lt;/code>&lt;/pre>&lt;/div>&lt;p>The first thing we want to do is get rid of this requirement. First, function arguments.&lt;a href="https://godbolt.org/g/RNnzcc">Compilation&lt;/a>&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">... &lt;/span>&lt;span style="color:#a6e22e">Args&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">SelfReturning&lt;/span> { &lt;span style="color:#66d9ef">using&lt;/span> RetType &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>pair&lt;span style="color:#f92672">&amp;lt;&lt;/span>SelfReturning, &lt;span style="color:#66d9ef">const&lt;/span> Context&lt;span style="color:#f92672">&amp;gt;&lt;/span>; &lt;span style="color:#66d9ef">using&lt;/span> FuncType &lt;span style="color:#f92672">=&lt;/span> RetType(&lt;span style="color:#f92672">*&lt;/span>)(Args... args); &lt;span style="color:#75715e">// (1)&lt;/span>&lt;span style="color:#75715e">&lt;/span> SelfReturning(FuncType func) &lt;span style="color:#f92672">:&lt;/span> _func{func} {}; RetType &lt;span style="color:#a6e22e">operator&lt;/span>()(Args... args) { &lt;span style="color:#75715e">// (2)&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> _func(std&lt;span style="color:#f92672">::&lt;/span>forward&lt;span style="color:#f92672">&amp;lt;&lt;/span>Args&lt;span style="color:#f92672">&amp;gt;&lt;/span>(args)...); } FuncType _func;};&lt;span style="color:#66d9ef">using&lt;/span> State &lt;span style="color:#f92672">=&lt;/span> SelfReturning&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> Context&lt;span style="color:#f92672">&amp;amp;&lt;/span>, Event&lt;span style="color:#f92672">&amp;gt;&lt;/span>;&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here we use &lt;a href="http://en.cppreference.com/w/cpp/language/parameter_pack">variadic templates&lt;/a> and &lt;a href="http://en.cppreference.com/w/cpp/utility/forward">perfect forwarding&lt;/a> to forward all the function arguments directly to the target function. You can see that in (1) and (2) we use &lt;code>Args...&lt;/code> and not the common &lt;code>Args&amp;amp;&amp;amp;...&lt;/code>. This is because the types are defined by the class template and are not deduced on the function call.&lt;/p>&lt;p>With this behind us, we address the return type.Here we come to another recursive issue. While the return type &lt;code>std::pair&amp;lt;SelfReturning, const Context&amp;gt;&lt;/code> depends on our &lt;code>SelfReturning&lt;/code> type, &lt;code>SelfReturning&lt;/code> itself depends on the return type. This means that just passing in the return type will not work (much like our original return-type issue). To solve it, we use a &lt;a href="http://en.cppreference.com/w/cpp/language/template_parameters">template-template parameter&lt;/a>.&lt;/p>&lt;p>&lt;a href="https://godbolt.org/g/DVgRPx">Compilation&lt;/a>&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">T&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Base&lt;/span>, &lt;span style="color:#66d9ef">class&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">... &lt;/span>&lt;span style="color:#a6e22e">Args&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#75715e">// (1)&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">SelfReturning&lt;/span> { &lt;span style="color:#66d9ef">using&lt;/span> RetType &lt;span style="color:#f92672">=&lt;/span> Base&lt;span style="color:#f92672">&amp;lt;&lt;/span>SelfReturning&lt;span style="color:#f92672">&amp;gt;&lt;/span>; &lt;span style="color:#75715e">//(2)&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">using&lt;/span> FuncType &lt;span style="color:#f92672">=&lt;/span> RetType(&lt;span style="color:#f92672">*&lt;/span>)(Args... args); SelfReturning(FuncType func) &lt;span style="color:#f92672">:&lt;/span> _func{ func } {} RetType &lt;span style="color:#a6e22e">operator&lt;/span>() (Args... args) { &lt;span style="color:#66d9ef">return&lt;/span> _func(std&lt;span style="color:#f92672">::&lt;/span>forward&lt;span style="color:#f92672">&amp;lt;&lt;/span>Args&lt;span style="color:#f92672">&amp;gt;&lt;/span>(args)...); } FuncType _func;};&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">T&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#66d9ef">using&lt;/span> PairWithCtx &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>pair&lt;span style="color:#f92672">&amp;lt;&lt;/span>T, &lt;span style="color:#66d9ef">const&lt;/span> Context&lt;span style="color:#f92672">&amp;gt;&lt;/span>; &lt;span style="color:#75715e">// (3)&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">using&lt;/span> State &lt;span style="color:#f92672">=&lt;/span> SelfReturning&lt;span style="color:#f92672">&amp;lt;&lt;/span>PairWithCtx, &lt;span style="color:#66d9ef">const&lt;/span> Context&lt;span style="color:#f92672">&amp;amp;&lt;/span>, Event&lt;span style="color:#f92672">&amp;gt;&lt;/span>;&lt;/code>&lt;/pre>&lt;/div>&lt;p>In (1), we pass in the template for the return type. In (2), we instantiate the type with our &lt;code>SelfReturning&lt;/code> class. As we&amp;rsquo;ve seen before, C++ allows this type of recursion, so we&amp;rsquo;re safe. In (3) we define our return-type template to be a pair with a &lt;code>const Context&lt;/code> as the second member.Done.&lt;/p>&lt;p>But what if we want to only return the &lt;code>SelfReturning&lt;/code> class? For that, we define a new template - an identity template.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">T&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">identity&lt;/span> {&lt;span style="color:#66d9ef">using&lt;/span> type &lt;span style="color:#f92672">=&lt;/span> T;};&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">T&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#66d9ef">using&lt;/span> identity_t &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">typename&lt;/span> identity&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;::&lt;/span>type;&lt;/code>&lt;/pre>&lt;/div>&lt;p>We define the &lt;code>identity&lt;/code> struct to hold a type, and use the &lt;code>identity_t&lt;/code> alias to access the type directly. This looks a bit odd, but C++ does not allow us to alias the template parameter directly. When isntatiating the &lt;code>identity_t&lt;/code> template with a type, we get the safe type again. Using that, we can return &lt;code>SelfReturning&lt;/code> directly.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#66d9ef">using&lt;/span> State &lt;span style="color:#f92672">=&lt;/span> SelfReturning&lt;span style="color:#f92672">&amp;lt;&lt;/span>identity_t&lt;span style="color:#f92672">&amp;gt;&lt;/span>;&lt;/code>&lt;/pre>&lt;/div>&lt;p>Personally, though, I hate having to write down the trivial cases explicitly. So let&amp;rsquo;s use some dirty tricks.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">T&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Base&lt;/span> &lt;span style="color:#f92672">=&lt;/span> identity_t, &lt;span style="color:#66d9ef">class&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">... &lt;/span>&lt;span style="color:#a6e22e">Args&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#75715e">// (1)&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">SelfReturning&lt;/span> { &lt;span style="color:#66d9ef">using&lt;/span> RetType &lt;span style="color:#f92672">=&lt;/span> Base&lt;span style="color:#f92672">&amp;lt;&lt;/span>SelfReturning&lt;span style="color:#f92672">&amp;gt;&lt;/span>; &lt;span style="color:#66d9ef">using&lt;/span> FuncType &lt;span style="color:#f92672">=&lt;/span> RetType(&lt;span style="color:#f92672">*&lt;/span>)(Args... args); SelfReturning(FuncType func) &lt;span style="color:#f92672">:&lt;/span> _func{ func } {} RetType &lt;span style="color:#a6e22e">operator&lt;/span>() (Args... args) { &lt;span style="color:#66d9ef">return&lt;/span> _func(std&lt;span style="color:#f92672">::&lt;/span>forward&lt;span style="color:#f92672">&amp;lt;&lt;/span>Args&lt;span style="color:#f92672">&amp;gt;&lt;/span>(args)...); } FuncType _func; &lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">... &lt;/span>&lt;span style="color:#a6e22e">AltArgs&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">using&lt;/span> WithArgs &lt;span style="color:#f92672">=&lt;/span> SelfReturning&lt;span style="color:#f92672">&amp;lt;&lt;/span>Base, AltArgs...&lt;span style="color:#f92672">&amp;gt;&lt;/span>; &lt;span style="color:#75715e">// (2)&lt;/span>&lt;span style="color:#75715e">&lt;/span>};&lt;/code>&lt;/pre>&lt;/div>&lt;p>In (1) we simply add &lt;code>identity_t&lt;/code> as the default argument for &lt;code>Base&lt;/code>. This lets us write the most trivial case (return &lt;code>SelfReturning&lt;/code>, take no arguments) as &lt;code>SelfReturning&amp;lt;&amp;gt;&lt;/code>. Nice.However, if we put anything into this set of template arguments, it will override &lt;code>identity_t&lt;/code>. That&amp;rsquo;s what the code at (2) is for. We set &lt;code>WithArgs&lt;/code> to be &lt;code>SelfReturning&lt;/code> with whatever &lt;code>Base&lt;/code> parameter it already has, thus only accepting template parameters for the arguments. Now we can write all of the following with ease.&lt;a href="https://godbolt.org/g/xvtKaE">Compilation&lt;/a>&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#66d9ef">using&lt;/span> Trivial &lt;span style="color:#f92672">=&lt;/span> SelfReturning&lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span>;&lt;span style="color:#66d9ef">using&lt;/span> InPair &lt;span style="color:#f92672">=&lt;/span> SelfReturning&lt;span style="color:#f92672">&amp;lt;&lt;/span>PairWithCtx&lt;span style="color:#f92672">&amp;gt;&lt;/span>;&lt;span style="color:#66d9ef">using&lt;/span> TrivialWithArgs &lt;span style="color:#f92672">=&lt;/span> SelfReturning&lt;span style="color:#f92672">&amp;lt;&amp;gt;::&lt;/span>WithArgs&lt;span style="color:#f92672">&amp;lt;&lt;/span>Context&lt;span style="color:#f92672">&amp;amp;&lt;/span>, Event&lt;span style="color:#f92672">&amp;gt;&lt;/span>;&lt;span style="color:#66d9ef">using&lt;/span> InPairWithArgs &lt;span style="color:#f92672">=&lt;/span> SelfReturning&lt;span style="color:#f92672">&amp;lt;&lt;/span>PairWithCtx&lt;span style="color:#f92672">&amp;gt;::&lt;/span>WithArgs&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> Context&lt;span style="color:#f92672">&amp;amp;&lt;/span>, Event&lt;span style="color:#f92672">&amp;gt;&lt;/span>;&lt;span style="color:#75715e">// Or alternatively&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">using&lt;/span> InPairWithArgs2 &lt;span style="color:#f92672">=&lt;/span> SelfReturning&lt;span style="color:#f92672">&amp;lt;&lt;/span>PairWithCtx, &lt;span style="color:#66d9ef">const&lt;/span> Context&lt;span style="color:#f92672">&amp;amp;&lt;/span>, Event&lt;span style="color:#f92672">&amp;gt;&lt;/span>;&lt;/code>&lt;/pre>&lt;/div>&lt;p>In &lt;a href="https://blog.tamir.dev/posts/a-functional-style-state-machine-in-cpp">Part 1&lt;/a> I promised generalizing the &lt;code>SelfReturning&lt;/code> class and getting some compile time guarantees. We&amp;rsquo;ve accomplished our generalization goal, so it&amp;rsquo;s time to get some safety in place.&lt;/p>&lt;h2 id="increasing-safety">Increasing Safety&lt;/h2>&lt;p>While our use of the &lt;code>switch&lt;/code> statement to discern different events is nice and concise, it is also somewhat error prone. It is easy to miss a case (though that can be prevented using compiler errors) or accidentally mistake one event for another. The latter is especially true if we want to pass information along with our event notification.One easy way to avoid those mistakes is to resolve the choice using function overloading instead of switch statements. Consider the following&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-C++" data-lang="C++">&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cstdio&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">// (1)&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">EventType&lt;/span> {A, B};&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">Switch&lt;/span>(EventType evt) { &lt;span style="color:#66d9ef">switch&lt;/span>(evt) { &lt;span style="color:#66d9ef">case&lt;/span> EventType&lt;span style="color:#f92672">::&lt;/span>A: puts(&lt;span style="color:#e6db74">&amp;#34;A&amp;#34;&lt;/span>); &lt;span style="color:#66d9ef">return&lt;/span>; &lt;span style="color:#66d9ef">case&lt;/span> EventType&lt;span style="color:#f92672">::&lt;/span>B: puts(&lt;span style="color:#e6db74">&amp;#34;B&amp;#34;&lt;/span>); &lt;span style="color:#66d9ef">return&lt;/span>; }}&lt;span style="color:#75715e">// (2)&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">EventA&lt;/span> {};&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">EventB&lt;/span> {};&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">Overload&lt;/span>(EventA) { puts(&lt;span style="color:#e6db74">&amp;#34;A&amp;#34;&lt;/span>); }&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">Overload&lt;/span>(EventB) { puts(&lt;span style="color:#e6db74">&amp;#34;B&amp;#34;&lt;/span>); }&lt;/code>&lt;/pre>&lt;/div>&lt;p>In (1) we use a &lt;code>switch&lt;/code> to discern the event type. It is easy to forget a &lt;code>return&lt;/code> or a &lt;code>break&lt;/code>. If we passed more data along, the signature for &lt;code>Switch&lt;/code> would likely change to &lt;code>void Switch(EventType evt, void* data)&lt;/code>. That&amp;rsquo;s definitely bad.In (2), we cannot mistake the types, and data can easily be passed inside the event structs. Sadly, the events are not different types, and C++ does not allow for heterogeneous containers. Or does it?&lt;/p>&lt;p>Enter C++17&amp;rsquo;s ✨&lt;code>std::variant&lt;/code>✨.&lt;/p>&lt;p>What is &lt;code>std::variant&lt;/code>, you ask? Well, it is a &lt;code>union&lt;/code>. A &lt;em>safe&lt;/em> &lt;code>union&lt;/code>! Safe meaning that you can only get a value from it if it really is there. No more type confusion; no more casting &lt;code>void&lt;/code> pointers. But how do we get the values out of &lt;code>std::variant&lt;/code>? Using &lt;code>std::visit&lt;/code>, of course!&lt;a href="https://godbolt.org/g/EfBahi">Compilation&lt;/a>, &lt;a href="http://coliru.stacked-crooked.com/a/95c37042037573ca">Execution&lt;/a>&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;variant&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;vector&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cstdio&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">EventA&lt;/span> {}; &lt;span style="color:#75715e">// (1)&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">EventB&lt;/span> {};&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">EventHandler&lt;/span> { &lt;span style="color:#75715e">// (2)&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">operator&lt;/span>() (EventA) { puts(&lt;span style="color:#e6db74">&amp;#34;A&amp;#34;&lt;/span>); } &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">operator&lt;/span>() (EventB) { puts(&lt;span style="color:#e6db74">&amp;#34;B&amp;#34;&lt;/span>); }};&lt;span style="color:#66d9ef">using&lt;/span> event_t &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>variant&lt;span style="color:#f92672">&amp;lt;&lt;/span>EventA, EventB&lt;span style="color:#f92672">&amp;gt;&lt;/span>;&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() { std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>event_t&lt;span style="color:#f92672">&amp;gt;&lt;/span> events &lt;span style="color:#f92672">=&lt;/span> {EventA{}, EventB{}}; &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">auto&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span> event : events) { std&lt;span style="color:#f92672">::&lt;/span>visit(EventHandler{}, event); &lt;span style="color:#75715e">// (3)&lt;/span>&lt;span style="color:#75715e">&lt;/span> } &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;}&lt;/code>&lt;/pre>&lt;/div>&lt;p>In (1) we define our new event types. This time they are different types, not just different values. In (2) we define our event handler. All we need is an function overload for every possible type, and a struct with multiple &lt;code>operator()&lt;/code> methods is an easy way to do it. Now all that is left to do is call &lt;code>std::visit&lt;/code> with our handler and an event. If we forget to handle an event type - the code &lt;a href="https://godbolt.org/g/Lzu3xV">does not compile!&lt;/a> This way, we &lt;em>know&lt;/em> that we always handle all event types, and never mix them up.&lt;/p>&lt;p>Now, if you liked the previous part, you probably don&amp;rsquo;t like writing a different handler class for every function. It completely ruins the locality of the code. But, we are using C++17, aren&amp;rsquo;t we?&lt;a href="https://godbolt.org/g/bqsqE9">Compilation&lt;/a>, &lt;a href="http://coliru.stacked-crooked.com/a/31074c40d4c9654d">Execution&lt;/a>&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;variant&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;vector&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cstdio&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">template&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">... &lt;/span>&lt;span style="color:#a6e22e">Ts&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">overloaded&lt;/span> &lt;span style="color:#f92672">:&lt;/span> Ts... { &lt;span style="color:#66d9ef">using&lt;/span> Ts&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">operator&lt;/span>()...; }; &lt;span style="color:#75715e">// (1)&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">template&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">... &lt;/span>&lt;span style="color:#a6e22e">Ts&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> overloaded(Ts...) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> overloaded&lt;span style="color:#f92672">&amp;lt;&lt;/span>Ts...&lt;span style="color:#f92672">&amp;gt;&lt;/span>;&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">EventA&lt;/span> {};&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">EventB&lt;/span> {};&lt;span style="color:#66d9ef">using&lt;/span> event_t &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>variant&lt;span style="color:#f92672">&amp;lt;&lt;/span>EventA, EventB&lt;span style="color:#f92672">&amp;gt;&lt;/span>;&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() { std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>event_t&lt;span style="color:#f92672">&amp;gt;&lt;/span> events &lt;span style="color:#f92672">=&lt;/span> {EventA{}, EventB{}}; &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">auto&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span> event : events) { std&lt;span style="color:#f92672">::&lt;/span>visit(overloaded { &lt;span style="color:#75715e">// (2)&lt;/span>&lt;span style="color:#75715e">&lt;/span> [] (EventA) { puts(&lt;span style="color:#e6db74">&amp;#34;A&amp;#34;&lt;/span>); }, [] (EventB) { puts(&lt;span style="color:#e6db74">&amp;#34;B&amp;#34;&lt;/span>); } }, event); } &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;}&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you&amp;rsquo;re not familiar with C++17, there may be a lot to take in here. In (1) we define a class that takes multiple lambdas and overloads them. In (2) we instantiate that class to inline our event handling functions.The full explanation to this code is a bit long, so I wrote &lt;a href="https://blog.tamir.dev/posts/that-overloaded-trick-overloading-lambdas-in-cpp17">another post&lt;/a> to explain it.&lt;/p>&lt;p>Applied to the state-machine, it will look like this:&lt;a href="https://godbolt.org/g/4VNxEM">Compilation&lt;/a>, &lt;a href="http://coliru.stacked-crooked.com/a/3bfd9a9220c60cb4">Execution&lt;/a>&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;tuple&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cstdio&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cstdlib&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;variant&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">template&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">... &lt;/span>&lt;span style="color:#a6e22e">Ts&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">overloaded&lt;/span> &lt;span style="color:#f92672">:&lt;/span> Ts... { &lt;span style="color:#66d9ef">using&lt;/span> Ts&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">operator&lt;/span>()...; };&lt;span style="color:#66d9ef">template&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">... &lt;/span>&lt;span style="color:#a6e22e">Ts&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> overloaded(Ts...) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> overloaded&lt;span style="color:#f92672">&amp;lt;&lt;/span>Ts...&lt;span style="color:#f92672">&amp;gt;&lt;/span>;&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">EventA&lt;/span> {};&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">EventB&lt;/span> {};&lt;span style="color:#66d9ef">using&lt;/span> Event &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>variant&lt;span style="color:#f92672">&amp;lt;&lt;/span>EventA, EventB&lt;span style="color:#f92672">&amp;gt;&lt;/span>;&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Context&lt;/span> { Context &lt;span style="color:#a6e22e">Inc&lt;/span>() &lt;span style="color:#66d9ef">const&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> Context{counter &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>}; } &lt;span style="color:#66d9ef">int&lt;/span> counter &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;};&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">T&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">identity&lt;/span> {&lt;span style="color:#66d9ef">using&lt;/span> type &lt;span style="color:#f92672">=&lt;/span> T;};&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">T&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#66d9ef">using&lt;/span> identity_t &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">typename&lt;/span> identity&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;::&lt;/span>type;&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">T&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Base&lt;/span> &lt;span style="color:#f92672">=&lt;/span> identity_t, &lt;span style="color:#66d9ef">class&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">... &lt;/span>&lt;span style="color:#a6e22e">Args&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">SelfReturning&lt;/span> { &lt;span style="color:#66d9ef">using&lt;/span> RetType &lt;span style="color:#f92672">=&lt;/span> Base&lt;span style="color:#f92672">&amp;lt;&lt;/span>SelfReturning&lt;span style="color:#f92672">&amp;gt;&lt;/span>; &lt;span style="color:#66d9ef">using&lt;/span> FuncType &lt;span style="color:#f92672">=&lt;/span> RetType(&lt;span style="color:#f92672">*&lt;/span>)(Args... args); SelfReturning(FuncType func) &lt;span style="color:#f92672">:&lt;/span> _func{ func } {} RetType &lt;span style="color:#a6e22e">operator&lt;/span>() (Args... args) { &lt;span style="color:#66d9ef">return&lt;/span> _func(std&lt;span style="color:#f92672">::&lt;/span>forward&lt;span style="color:#f92672">&amp;lt;&lt;/span>Args&lt;span style="color:#f92672">&amp;gt;&lt;/span>(args)...); } FuncType _func; &lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">... &lt;/span>&lt;span style="color:#a6e22e">AltArgs&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">using&lt;/span> WithArgs &lt;span style="color:#f92672">=&lt;/span> SelfReturning&lt;span style="color:#f92672">&amp;lt;&lt;/span>Base, AltArgs...&lt;span style="color:#f92672">&amp;gt;&lt;/span>;};&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">T&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#66d9ef">using&lt;/span> PairWithCtx &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>pair&lt;span style="color:#f92672">&amp;lt;&lt;/span>T, &lt;span style="color:#66d9ef">const&lt;/span> Context&lt;span style="color:#f92672">&amp;gt;&lt;/span>;&lt;span style="color:#66d9ef">using&lt;/span> State &lt;span style="color:#f92672">=&lt;/span> SelfReturning&lt;span style="color:#f92672">&amp;lt;&lt;/span>PairWithCtx&lt;span style="color:#f92672">&amp;gt;::&lt;/span>WithArgs&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> Context&lt;span style="color:#f92672">&amp;amp;&lt;/span>, Event&lt;span style="color:#f92672">&amp;gt;&lt;/span>;State&lt;span style="color:#f92672">::&lt;/span>RetType A(&lt;span style="color:#66d9ef">const&lt;/span> Context&lt;span style="color:#f92672">&amp;amp;&lt;/span>, Event);State&lt;span style="color:#f92672">::&lt;/span>RetType B(&lt;span style="color:#66d9ef">const&lt;/span> Context&lt;span style="color:#f92672">&amp;amp;&lt;/span>, Event);State&lt;span style="color:#f92672">::&lt;/span>RetType A(&lt;span style="color:#66d9ef">const&lt;/span> Context&lt;span style="color:#f92672">&amp;amp;&lt;/span> ctx, Event evt) { printf(&lt;span style="color:#e6db74">&amp;#34;State A, counter = %d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, ctx.counter); &lt;span style="color:#66d9ef">return&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>visit(overloaded{ [&lt;span style="color:#f92672">&amp;amp;&lt;/span>] (EventA) { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">make_pair&lt;/span>(A, ctx); }, [&lt;span style="color:#f92672">&amp;amp;&lt;/span>] (EventB) { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">make_pair&lt;/span>(B, ctx.Inc()); } }, evt);}State&lt;span style="color:#f92672">::&lt;/span>RetType B(&lt;span style="color:#66d9ef">const&lt;/span> Context&lt;span style="color:#f92672">&amp;amp;&lt;/span> ctx, Event evt) { printf(&lt;span style="color:#e6db74">&amp;#34;State B, counter = %d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, ctx.counter); &lt;span style="color:#66d9ef">return&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>visit(overloaded{ [&lt;span style="color:#f92672">&amp;amp;&lt;/span>] (EventA) { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">make_pair&lt;/span>(A, ctx.Inc()); }, [&lt;span style="color:#f92672">&amp;amp;&lt;/span>] (EventB) { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">make_pair&lt;/span>(B, ctx); } }, evt);}&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() { State state &lt;span style="color:#f92672">=&lt;/span> A; Context ctx{}; Event events[] &lt;span style="color:#f92672">=&lt;/span> {EventB{}, EventA{}, EventB{}, EventA{}, }; &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">auto&lt;/span> evt : events) { std&lt;span style="color:#f92672">::&lt;/span>tie(state, ctx) &lt;span style="color:#f92672">=&lt;/span> state(ctx, evt); } &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;}&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you can see, the change is minimal.&lt;/p>&lt;h2 id="passing-in-data">Passing In Data&lt;/h2>&lt;p>With that, it is time to address an issue I completely neglected in Part 1.Passing in data.&lt;/p>&lt;p>Our current state-machine model is based on the idea that the events themselves are the only information the states need. This is naive. In many real-life scenarios, events carry data with them. Now, with &lt;code>std::variant&lt;/code>, we can puts data into the different event types. All we need to do is add data-members to our event structs. We define our new, data-carrying events as follows:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">EventA&lt;/span> { &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> msg{&lt;span style="color:#66d9ef">nullptr&lt;/span>};};&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">EventB&lt;/span> { &lt;span style="color:#66d9ef">int&lt;/span> number{&lt;span style="color:#ae81ff">0&lt;/span>};};&lt;/code>&lt;/pre>&lt;/div>&lt;p>Nothing else needs to change. And now, in the state functions, we can easily access the event data:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-C++" data-lang="C++">State&lt;span style="color:#f92672">::&lt;/span>RetType A(&lt;span style="color:#66d9ef">const&lt;/span> Context&lt;span style="color:#f92672">&amp;amp;&lt;/span> ctx, Event evt) { printf(&lt;span style="color:#e6db74">&amp;#34;State A, counter = %d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, ctx.counter); &lt;span style="color:#66d9ef">return&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>visit(overloaded{ [&lt;span style="color:#f92672">&amp;amp;&lt;/span>] (EventA e) { &lt;span style="color:#66d9ef">if&lt;/span> (e.msg &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nullptr&lt;/span>) { printf(&lt;span style="color:#e6db74">&amp;#34;A message = &lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, e.msg); } &lt;span style="color:#66d9ef">else&lt;/span> { puts(&lt;span style="color:#e6db74">&amp;#34;A message = nullptr&amp;#34;&lt;/span>); } &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">make_pair&lt;/span>(A, ctx); }, [&lt;span style="color:#f92672">&amp;amp;&lt;/span>] (EventB) { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">make_pair&lt;/span>(B, ctx.Inc()); } }, evt);}State&lt;span style="color:#f92672">::&lt;/span>RetType B(&lt;span style="color:#66d9ef">const&lt;/span> Context&lt;span style="color:#f92672">&amp;amp;&lt;/span> ctx, Event evt) { printf(&lt;span style="color:#e6db74">&amp;#34;State B, counter = %d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, ctx.counter); &lt;span style="color:#66d9ef">return&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>visit(overloaded{ [&lt;span style="color:#f92672">&amp;amp;&lt;/span>] (EventA e) { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">make_pair&lt;/span>(A, ctx.Inc()); }, [&lt;span style="color:#f92672">&amp;amp;&lt;/span>] (EventB e) { printf(&lt;span style="color:#e6db74">&amp;#34;B number = %d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, e.number); &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">make_pair&lt;/span>(B, ctx); } }, evt);}&lt;/code>&lt;/pre>&lt;/div>&lt;p>Et voilà.&lt;/p>&lt;p>Putting everything together now, we get the following code:&lt;/p>&lt;p>&lt;a href="https://godbolt.org/g/rR5udQ">Compilation&lt;/a>,&lt;a href="http://coliru.stacked-crooked.com/a/273170beeb72c9a7">Execution&lt;/a>&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;tuple&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cstdio&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cstdlib&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;variant&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">template&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">... &lt;/span>&lt;span style="color:#a6e22e">Ts&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">overloaded&lt;/span> &lt;span style="color:#f92672">:&lt;/span> Ts... { &lt;span style="color:#66d9ef">using&lt;/span> Ts&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">operator&lt;/span>()...; };&lt;span style="color:#66d9ef">template&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">... &lt;/span>&lt;span style="color:#a6e22e">Ts&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> overloaded(Ts...) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> overloaded&lt;span style="color:#f92672">&amp;lt;&lt;/span>Ts...&lt;span style="color:#f92672">&amp;gt;&lt;/span>;&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">EventA&lt;/span> { &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> msg{&lt;span style="color:#66d9ef">nullptr&lt;/span>};};&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">EventB&lt;/span> { &lt;span style="color:#66d9ef">int&lt;/span> number{&lt;span style="color:#ae81ff">0&lt;/span>};};&lt;span style="color:#66d9ef">using&lt;/span> Event &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>variant&lt;span style="color:#f92672">&amp;lt;&lt;/span>EventA, EventB&lt;span style="color:#f92672">&amp;gt;&lt;/span>;&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Context&lt;/span> { Context &lt;span style="color:#a6e22e">Inc&lt;/span>() &lt;span style="color:#66d9ef">const&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> Context{counter &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>}; } &lt;span style="color:#66d9ef">int&lt;/span> counter &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;};&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">T&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">identity&lt;/span> {&lt;span style="color:#66d9ef">using&lt;/span> type &lt;span style="color:#f92672">=&lt;/span> T;};&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">T&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#66d9ef">using&lt;/span> identity_t &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">typename&lt;/span> identity&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;::&lt;/span>type;&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">T&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Base&lt;/span> &lt;span style="color:#f92672">=&lt;/span> identity_t, &lt;span style="color:#66d9ef">class&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">... &lt;/span>&lt;span style="color:#a6e22e">Args&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">SelfReturning&lt;/span> { &lt;span style="color:#66d9ef">using&lt;/span> RetType &lt;span style="color:#f92672">=&lt;/span> Base&lt;span style="color:#f92672">&amp;lt;&lt;/span>SelfReturning&lt;span style="color:#f92672">&amp;gt;&lt;/span>; &lt;span style="color:#66d9ef">using&lt;/span> FuncType &lt;span style="color:#f92672">=&lt;/span> RetType(&lt;span style="color:#f92672">*&lt;/span>)(Args... args); SelfReturning(FuncType func) &lt;span style="color:#f92672">:&lt;/span> _func{ func } {} RetType &lt;span style="color:#a6e22e">operator&lt;/span>() (Args... args) { &lt;span style="color:#66d9ef">return&lt;/span> _func(std&lt;span style="color:#f92672">::&lt;/span>forward&lt;span style="color:#f92672">&amp;lt;&lt;/span>Args&lt;span style="color:#f92672">&amp;gt;&lt;/span>(args)...); } FuncType _func; &lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">... &lt;/span>&lt;span style="color:#a6e22e">AltArgs&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">using&lt;/span> WithArgs &lt;span style="color:#f92672">=&lt;/span> SelfReturning&lt;span style="color:#f92672">&amp;lt;&lt;/span>Base, AltArgs...&lt;span style="color:#f92672">&amp;gt;&lt;/span>;};&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">T&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#66d9ef">using&lt;/span> PairWithCtx &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>pair&lt;span style="color:#f92672">&amp;lt;&lt;/span>T, &lt;span style="color:#66d9ef">const&lt;/span> Context&lt;span style="color:#f92672">&amp;gt;&lt;/span>;&lt;span style="color:#66d9ef">using&lt;/span> State &lt;span style="color:#f92672">=&lt;/span> SelfReturning&lt;span style="color:#f92672">&amp;lt;&lt;/span>PairWithCtx&lt;span style="color:#f92672">&amp;gt;::&lt;/span>WithArgs&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> Context&lt;span style="color:#f92672">&amp;amp;&lt;/span>, Event&lt;span style="color:#f92672">&amp;gt;&lt;/span>;State&lt;span style="color:#f92672">::&lt;/span>RetType A(&lt;span style="color:#66d9ef">const&lt;/span> Context&lt;span style="color:#f92672">&amp;amp;&lt;/span>, Event);State&lt;span style="color:#f92672">::&lt;/span>RetType B(&lt;span style="color:#66d9ef">const&lt;/span> Context&lt;span style="color:#f92672">&amp;amp;&lt;/span>, Event);State&lt;span style="color:#f92672">::&lt;/span>RetType A(&lt;span style="color:#66d9ef">const&lt;/span> Context&lt;span style="color:#f92672">&amp;amp;&lt;/span> ctx, Event evt) { printf(&lt;span style="color:#e6db74">&amp;#34;State A, counter = %d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, ctx.counter); &lt;span style="color:#66d9ef">return&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>visit(overloaded{ [&lt;span style="color:#f92672">&amp;amp;&lt;/span>] (EventA e) { &lt;span style="color:#66d9ef">if&lt;/span> (e.msg &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nullptr&lt;/span>) { printf(&lt;span style="color:#e6db74">&amp;#34;A message = &lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, e.msg); } &lt;span style="color:#66d9ef">else&lt;/span> { puts(&lt;span style="color:#e6db74">&amp;#34;A message = nullptr&amp;#34;&lt;/span>); } &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">make_pair&lt;/span>(A, ctx); }, [&lt;span style="color:#f92672">&amp;amp;&lt;/span>] (EventB) { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">make_pair&lt;/span>(B, ctx.Inc()); } }, evt);}State&lt;span style="color:#f92672">::&lt;/span>RetType B(&lt;span style="color:#66d9ef">const&lt;/span> Context&lt;span style="color:#f92672">&amp;amp;&lt;/span> ctx, Event evt) { printf(&lt;span style="color:#e6db74">&amp;#34;State B, counter = %d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, ctx.counter); &lt;span style="color:#66d9ef">return&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>visit(overloaded{ [&lt;span style="color:#f92672">&amp;amp;&lt;/span>] (EventA e) { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">make_pair&lt;/span>(A, ctx.Inc()); }, [&lt;span style="color:#f92672">&amp;amp;&lt;/span>] (EventB e) { printf(&lt;span style="color:#e6db74">&amp;#34;B number = %d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, e.number); &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">make_pair&lt;/span>(B, ctx); } }, evt);}&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() { State state &lt;span style="color:#f92672">=&lt;/span> A; Context ctx{}; Event events[] &lt;span style="color:#f92672">=&lt;/span> {EventB{}, EventA{}, EventB{}, EventB{&lt;span style="color:#ae81ff">10&lt;/span>}, EventA{}, EventA{&lt;span style="color:#e6db74">&amp;#34;Hello, world!&amp;#34;&lt;/span>}}; &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">auto&lt;/span> evt : events) { std&lt;span style="color:#f92672">::&lt;/span>tie(state, ctx) &lt;span style="color:#f92672">=&lt;/span> state(ctx, evt); } &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;}&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="summary">Summary&lt;/h2>&lt;p>As promised, we have used some dark template magic to achieve:&lt;/p>&lt;ol>&lt;li>A nice generalization of &lt;code>SelfReturning&lt;/code>, allowing customization of both return types and argument types;&lt;/li>&lt;li>Better compile-time safety by replacing the &lt;code>switch&lt;/code> statement with overload resolution;&lt;/li>&lt;li>Passing data along with the events.&lt;/li>&lt;li>Hopefully, a lot of fun along the way.&lt;/li>&lt;/ol></description></item><item><title>That `overloaded` Trick: Overloading Lambdas in C++17</title><link>https://blog.tamir.dev/posts/that-overloaded-trick-overloading-lambdas-in-cpp17/</link><pubDate>Tue, 15 Aug 2017 00:00:00 +0000</pubDate><guid>https://blog.tamir.dev/posts/that-overloaded-trick-overloading-lambdas-in-cpp17/</guid><description>&lt;p>C++17 has granted us with &lt;a href="http://en.cppreference.com/w/cpp/utility/variant">&lt;code>std::variant&lt;/code>&lt;/a>. Simply put, it is a type-safe &lt;code>union&lt;/code>. To access the value it stores, you can either request a specific type (using &lt;a href="http://en.cppreference.com/w/cpp/utility/variant/get">&lt;code>std::get&lt;/code>&lt;/a> or something similar) or &amp;ldquo;visit&amp;rdquo; the variant, automatically handling only the data-type that is actually there.Visiting is done using &lt;a href="http://en.cppreference.com/w/cpp/utility/variant/visit">&lt;code>std::visit&lt;/code>&lt;/a>, and is fairly straight forward.&lt;/p>&lt;p>&lt;a href="https://godbolt.org/g/UhTBtD">Compilation&lt;/a>, &lt;a href="http://coliru.stacked-crooked.com/a/ce02024f6539db91">Execution&lt;/a>&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;variant&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cstdio&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;vector&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">using&lt;/span> var_t &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>variant&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&amp;gt;&lt;/span>; &lt;span style="color:#75715e">// (1)&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Print&lt;/span> { &lt;span style="color:#75715e">// (2)&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">operator&lt;/span>() (&lt;span style="color:#66d9ef">int&lt;/span> i) { printf(&lt;span style="color:#e6db74">&amp;#34;%d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, i); } &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">operator&lt;/span> () (&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> str) { puts(str); }};&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() { std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>var_t&lt;span style="color:#f92672">&amp;gt;&lt;/span> vars &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Hello, World!&amp;#34;&lt;/span>}; &lt;span style="color:#75715e">// (3)&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">auto&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span> v : vars) { std&lt;span style="color:#f92672">::&lt;/span>visit(Print{}, v); &lt;span style="color:#75715e">// (4)&lt;/span>&lt;span style="color:#75715e">&lt;/span> } &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;}&lt;/code>&lt;/pre>&lt;/div>&lt;p>In (1) we define our variant type. In (2) we define a class with an overloaded &lt;code>operator()&lt;/code>. This is needed for the call to &lt;code>std::visit&lt;/code>. In (3) we define a vector of variants. In (4) we visit each variant. We pass in an instance of &lt;code>Print&lt;/code>, and overload resolution ensures that the correct overload will be called for every type.But this example forces us to write and name an object for the overloaded &lt;code>operator()&lt;/code>. We can do better. In fact, the example for &lt;code>std::visit&lt;/code> on &lt;a href="http://en.cppreference.com/w/cpp/utility/variant/visit">cppreference&lt;/a> already does. Here is an example derived from it:&lt;/p>&lt;p>&lt;a href="https://godbolt.org/g/8gAj3y">Compilation&lt;/a>, &lt;a href="http://coliru.stacked-crooked.com/a/2edc87064e156115">Execution&lt;/a>&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;variant&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cstdio&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;vector&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">template&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">... &lt;/span>&lt;span style="color:#a6e22e">Ts&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">overloaded&lt;/span> &lt;span style="color:#f92672">:&lt;/span> Ts... { &lt;span style="color:#66d9ef">using&lt;/span> Ts&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">operator&lt;/span>()...; }; &lt;span style="color:#75715e">// (1)&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">template&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">... &lt;/span>&lt;span style="color:#a6e22e">Ts&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> overloaded(Ts...) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> overloaded&lt;span style="color:#f92672">&amp;lt;&lt;/span>Ts...&lt;span style="color:#f92672">&amp;gt;&lt;/span>; &lt;span style="color:#75715e">// (2)&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">using&lt;/span> var_t &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>variant&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&amp;gt;&lt;/span>;&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() { std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>var_t&lt;span style="color:#f92672">&amp;gt;&lt;/span> vars &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Hello, World!&amp;#34;&lt;/span>}; &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">auto&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span> v : vars) { std&lt;span style="color:#f92672">::&lt;/span>visit(overloaded { &lt;span style="color:#75715e">// (3)&lt;/span>&lt;span style="color:#75715e">&lt;/span> [](&lt;span style="color:#66d9ef">int&lt;/span> i) { printf(&lt;span style="color:#e6db74">&amp;#34;%d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, i); }, [](&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> str) { puts(str); } }, v); } &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;}&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is certainly more compact, and we removed the &lt;code>Print&lt;/code> struct. But how does it work? You can see a class-template (1), lambdas passed in as arguments for the construction (3), and something with an arrow and some more template magic (2). Let&amp;rsquo;s build it step by step.&lt;/p>&lt;p>First, we want to break the print functions out of &lt;code>Print&lt;/code> and compose them later.&lt;/p>&lt;p>&lt;a href="https://godbolt.org/g/ZuyYrD">Compilation&lt;/a>, &lt;a href="http://coliru.stacked-crooked.com/a/4e90f3c2ae1a5113">Execution&lt;/a>&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">PrintInt&lt;/span> { &lt;span style="color:#75715e">//(1)&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">operator&lt;/span>() (&lt;span style="color:#66d9ef">int&lt;/span> i) { printf(&lt;span style="color:#e6db74">&amp;#34;%d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, i); }};&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">PrintCString&lt;/span> { &lt;span style="color:#75715e">// (2)&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">operator&lt;/span> () (&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> str) { puts(str); }};&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Print&lt;/span> &lt;span style="color:#f92672">:&lt;/span> PrintInt, PrintCString { &lt;span style="color:#75715e">// (3)&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">using&lt;/span> PrintInt&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">operator&lt;/span>(); &lt;span style="color:#66d9ef">using&lt;/span> PrintCString&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">operator&lt;/span>();};&lt;/code>&lt;/pre>&lt;/div>&lt;p>In (1) and (2), we define the same operators as before, but in separate structs. In (3), we are inherit from both of those structs, then explicitly use their &lt;code>operator()&lt;/code>. This results in exactly the same results as before. Next, we convert &lt;code>Print&lt;/code> into a class template. I&amp;rsquo;ll jump ahead and convert it directly to a variadic template.&lt;/p>&lt;p>&lt;a href="https://godbolt.org/g/iXGT2p">Compilation&lt;/a>, &lt;a href="http://coliru.stacked-crooked.com/a/3e9902784fec5791">Execution&lt;/a>&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">... &lt;/span>&lt;span style="color:#a6e22e">Ts&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#75715e">// (1)&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Print&lt;/span> &lt;span style="color:#f92672">:&lt;/span> Ts... { &lt;span style="color:#66d9ef">using&lt;/span> Ts&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">operator&lt;/span>()...;};&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() { std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>var_t&lt;span style="color:#f92672">&amp;gt;&lt;/span> vars &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Hello, World!&amp;#34;&lt;/span>}; &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">auto&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span> v : vars) { std&lt;span style="color:#f92672">::&lt;/span>visit(Print&lt;span style="color:#f92672">&amp;lt;&lt;/span>PrintCString, PrintInt&lt;span style="color:#f92672">&amp;gt;&lt;/span>{}, v); &lt;span style="color:#75715e">// (2)&lt;/span>&lt;span style="color:#75715e">&lt;/span> } &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;}&lt;/code>&lt;/pre>&lt;/div>&lt;p>In (1) we define the template. We take an arbitrary number of classes, inherit from them, and use their &lt;code>operator()&lt;/code>. In (2) we instantiate the &lt;code>Print&lt;/code> class-template with &lt;code>PrintCString&lt;/code> and &lt;code>PrintInt&lt;/code> to get their functionality.Next, we want to use &lt;a href="http://en.cppreference.com/w/cpp/language/lambda">lambdas&lt;/a> to do the same. This is possible because lambdas are not functions; they are objects implementing &lt;code>operator()&lt;/code>.&lt;/p>&lt;p>&lt;a href="https://godbolt.org/g/bFzYUP">Compilation&lt;/a>, &lt;a href="http://coliru.stacked-crooked.com/a/ed95f8db6c30562e">Execution&lt;/a>&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() { std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>var_t&lt;span style="color:#f92672">&amp;gt;&lt;/span> vars &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Hello, World!&amp;#34;&lt;/span>}; &lt;span style="color:#66d9ef">auto&lt;/span> PrintInt &lt;span style="color:#f92672">=&lt;/span> [](&lt;span style="color:#66d9ef">int&lt;/span> i) { printf(&lt;span style="color:#e6db74">&amp;#34;%d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, i); }; &lt;span style="color:#75715e">// (1)&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">auto&lt;/span> PrintCString &lt;span style="color:#f92672">=&lt;/span> [](&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> str) { puts(str); }; &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">auto&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span> v : vars) { std&lt;span style="color:#f92672">::&lt;/span>visit( Print&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">decltype&lt;/span>(PrintCString), &lt;span style="color:#66d9ef">decltype&lt;/span>(PrintInt)&lt;span style="color:#f92672">&amp;gt;&lt;/span>{PrintCString, PrintInt}, &lt;span style="color:#75715e">// (2)&lt;/span>&lt;span style="color:#75715e">&lt;/span> v); } &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;}&lt;/code>&lt;/pre>&lt;/div>&lt;p>In (1) we define the lambdas we need. In (2) we instantiate the template with our lambdas. This is ugly. Since lambdas have unique types, we need to define them before using them as template parameters (deducing their types using &lt;code>decltype&lt;/code>). Then, we need to pass the lambdas as arguments for &lt;a href="http://en.cppreference.com/w/cpp/language/aggregate_initialization">aggregate initialization&lt;/a> as lambdas have a delete default constructor. We are close, but not quite there yet.The &lt;code>&amp;lt;decltype(PrintCString), decltype(PrintInt)&amp;gt;&lt;/code> part is really ugly, and causes repetition. But it is needed as ctors cannot do type-deduction. So in proper C++ style, we will create a function to circumvent that.&lt;/p>&lt;p>&lt;a href="https://godbolt.org/g/S3XGZr">Compilation&lt;/a>, &lt;a href="http://coliru.stacked-crooked.com/a/8f373b382ed73d3b">Execution&lt;/a>&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">... &lt;/span>&lt;span style="color:#a6e22e">Ts&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#75715e">// (1)&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">auto&lt;/span> MakePrint(Ts... ts) { &lt;span style="color:#66d9ef">return&lt;/span> Print&lt;span style="color:#f92672">&amp;lt;&lt;/span>Ts...&lt;span style="color:#f92672">&amp;gt;&lt;/span>{ts...};}&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() { std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>var_t&lt;span style="color:#f92672">&amp;gt;&lt;/span> vars &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Hello, World!&amp;#34;&lt;/span>}; &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">auto&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span> v : vars) { std&lt;span style="color:#f92672">::&lt;/span>visit( MakePrint( &lt;span style="color:#75715e">// (2)&lt;/span>&lt;span style="color:#75715e">&lt;/span> [](&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> str) { puts(str); }, [](&lt;span style="color:#66d9ef">int&lt;/span> i) { printf(&lt;span style="color:#e6db74">&amp;#34;%d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, i); } ), v); } &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;}&lt;/code>&lt;/pre>&lt;/div>&lt;p>In (1) we define our helper function, to perform type deduction and forward it to the ctor. In (2) we take advantage of our newly found type-deduction to define the lambdas inline. But this is C++17, and we can do better.&lt;/p>&lt;p>C++17 added &lt;a href="http://en.cppreference.com/w/cpp/language/class_template_argument_deduction">user-defined deduction guides&lt;/a>. Those allow us to instruct the compiler to perform the same actions as our helper function, but without adding another function. Using a suitable deduction guide, the code is as follows.&lt;/p>&lt;p>&lt;a href="https://godbolt.org/g/ZZXM6L">Compilation&lt;/a>, &lt;a href="http://coliru.stacked-crooked.com/a/1bbf8c7cccedd3d8">Execution&lt;/a>&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;variant&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cstdio&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;vector&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">using&lt;/span> var_t &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>variant&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&amp;gt;&lt;/span>;&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">... &lt;/span>&lt;span style="color:#a6e22e">Ts&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Print&lt;/span> &lt;span style="color:#f92672">:&lt;/span> Ts... { &lt;span style="color:#66d9ef">using&lt;/span> Ts&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">operator&lt;/span>()...;};&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>&lt;span style="color:#a6e22e">Ts&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> Print(Ts...) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> Print&lt;span style="color:#f92672">&amp;lt;&lt;/span>Ts...&lt;span style="color:#f92672">&amp;gt;&lt;/span>; &lt;span style="color:#75715e">// (1)&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() { std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>var_t&lt;span style="color:#f92672">&amp;gt;&lt;/span> vars &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Hello, World!&amp;#34;&lt;/span>}; &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">auto&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span> v : vars) { std&lt;span style="color:#f92672">::&lt;/span>visit( Print{ &lt;span style="color:#75715e">// (2)&lt;/span>&lt;span style="color:#75715e">&lt;/span> [](&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> str) { puts(str); }, [](&lt;span style="color:#66d9ef">int&lt;/span> i) { printf(&lt;span style="color:#e6db74">&amp;#34;%d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, i); } }, v); } &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;}&lt;/code>&lt;/pre>&lt;/div>&lt;p>In (1) we define a deduction guide which acts as our previous helper function, and in (2) we use the constructor instead of a helper function. Done.&lt;/p>&lt;p>Now we have fully recreated the original example. As &lt;code>Print&lt;/code> is no longer indicative of the template-class' behavior, &lt;code>overloaded&lt;/code> is probably a better name.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#66d9ef">template&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">... &lt;/span>&lt;span style="color:#a6e22e">Ts&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">overloaded&lt;/span> &lt;span style="color:#f92672">:&lt;/span> Ts... { &lt;span style="color:#66d9ef">using&lt;/span> Ts&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">operator&lt;/span>()...; };&lt;span style="color:#66d9ef">template&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">... &lt;/span>&lt;span style="color:#a6e22e">Ts&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> overloaded(Ts...) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> overloaded&lt;span style="color:#f92672">&amp;lt;&lt;/span>Ts...&lt;span style="color:#f92672">&amp;gt;&lt;/span>;&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>A Functional-Style State Machine in C++</title><link>https://blog.tamir.dev/posts/a-functional-style-state-machine-in-cpp/</link><pubDate>Fri, 26 May 2017 00:00:00 +0000</pubDate><guid>https://blog.tamir.dev/posts/a-functional-style-state-machine-in-cpp/</guid><description>&lt;p>If you go to any of your colleagues now and ask them, &lt;em>&amp;ldquo;can a function in C++ return itself?&amp;quot;&lt;/em> they will probably give you the wrong answer.Now ask them what the return type of the function is going to be. Here, let me help you:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-C++" data-lang="C++">&lt;span style="color:#66d9ef">using&lt;/span> SelfReturning &lt;span style="color:#f92672">=&lt;/span> SelfReturning (&lt;span style="color:#f92672">*&lt;/span>)();SelfReturning &lt;span style="color:#a6e22e">A&lt;/span>() { &lt;span style="color:#66d9ef">return&lt;/span> A; }&lt;/code>&lt;/pre>&lt;/div>&lt;p>Great!But it doesn&amp;rsquo;t compile. and neither does&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-C++" data-lang="C++">&lt;span style="color:#66d9ef">auto&lt;/span> &lt;span style="color:#a6e22e">A&lt;/span>() { &lt;span style="color:#66d9ef">return&lt;/span> A; }&lt;/code>&lt;/pre>&lt;/div>&lt;p>It turns out that C++&amp;rsquo;s type-system does not allow for recursive types. This is annoying. There is no reason why a function should not be able to return itself. It is even more annoying given that object methods can return the objects that hold them:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-C++" data-lang="C++">&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">A&lt;/span> { A &lt;span style="color:#a6e22e">operator&lt;/span>()() { &lt;span style="color:#66d9ef">return&lt;/span> A(); }};&lt;/code>&lt;/pre>&lt;/div>&lt;p>This code works. And for obvious reasons. Object methods are not a part of the object. They do not affect the object size or its construction. They are just a syntactic utility. There is no type-system recursion going on here.&lt;/p>&lt;p>With functions there is obvious type-recursion. But if you look at the work the compiler actually has to do - it seems absurd. A function is never constructed, it just is. It is not allocated. The function&amp;rsquo;s signature changes nothing about the type.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-C++" data-lang="C++">&lt;span style="color:#66d9ef">void&lt;/span>&lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">A&lt;/span>() { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">reinterpret_cast&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">void&lt;/span>&lt;span style="color:#f92672">*&amp;gt;&lt;/span>(A); &lt;span style="color:#75715e">// Same as C&amp;#39;s `(void*)A`&lt;/span>&lt;span style="color:#75715e">&lt;/span>}&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() { &lt;span style="color:#66d9ef">auto&lt;/span> a &lt;span style="color:#f92672">=&lt;/span> A; &lt;span style="color:#66d9ef">while&lt;/span> (true) { &lt;span style="color:#75715e">// Cast back to function pointer&lt;/span>&lt;span style="color:#75715e">&lt;/span> a &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">reinterpret_cast&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">void&lt;/span>&lt;span style="color:#f92672">*&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>)()&lt;span style="color:#f92672">&amp;gt;&lt;/span>(A()); } &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;}&lt;/code>&lt;/pre>&lt;/div>&lt;p>See? No missing information. The compiler has all the knowledge it needs, but the type-system still prevents us from writing our code (or, in this case, from writing it in a type-safe manner). We can do better.&lt;/p>&lt;p>We already know that objects can be used to break type recursion. Let&amp;rsquo;s see if we can use them here without creating so much boiler-plate code:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-C++" data-lang="C++">&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">SelfReturning&lt;/span> {&lt;span style="color:#66d9ef">using&lt;/span> FuncType &lt;span style="color:#f92672">=&lt;/span> SelfReturning(&lt;span style="color:#f92672">*&lt;/span>)(); &lt;span style="color:#75715e">// (1)&lt;/span>&lt;span style="color:#75715e">&lt;/span>SelfReturning(FuncType func) &lt;span style="color:#f92672">:&lt;/span> _func{func} {} &lt;span style="color:#75715e">// (2)&lt;/span>&lt;span style="color:#75715e">&lt;/span>SelfReturning &lt;span style="color:#a6e22e">operator&lt;/span>() () { &lt;span style="color:#66d9ef">return&lt;/span> _func(); } &lt;span style="color:#75715e">// (3)&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">private&lt;/span>&lt;span style="color:#f92672">:&lt;/span>FuncType _func;};&lt;/code>&lt;/pre>&lt;/div>&lt;p>The answer is yes. We &lt;em>can&lt;/em>. Just substitute this class for the failed type definition of the first example and everything works as advertised. But how does it work?To break the type-recursion, we create a proxy object. Its sole purpose is to hold a function pointer and call it.Line &lt;strong>(1)&lt;/strong> defines the function type that we expect to hold. Note that there is no direct recursion there. &lt;strong>(2)&lt;/strong> is the constructor, taking the function pointer and storing it. &lt;strong>(3)&lt;/strong> is where we forward the call to the function pointer. Note that here, too there is no type recursion as the type of the class is distinct from the type of its &lt;code>operator()&lt;/code> function.As a bonus, this compiles identical to the &lt;code>reinterpret_cast&amp;lt;void*&amp;gt;&lt;/code> version in both Clang and GCC when using &lt;code>-O3&lt;/code> (see &lt;a href="https://godbolt.org/g/QDz9Oc">here&lt;/a> and &lt;a href="https://godbolt.org/g/ln0AZG">here&lt;/a>), and at the same time maintaining type-safety. Zero-cost abstraction at work.&lt;/p>&lt;p>But why is that interesting? What are the use-cases?&lt;/p>&lt;p>Well, during the last few months, I&amp;rsquo;ve routinely consumed one programming-related talk per day. I find it a great way to expand my knowledge, and far easier to do than reading an article every day.&lt;/p>&lt;p>Last week, while working on some minor state-machine, I came across &lt;a href="https://youtu.be/nrVIlhtoE3Y">Declarative Thinking, Declarative Practice&lt;/a> by &lt;a href="https://twitter.com/KevlinHenney">Kevlin Henney&lt;/a>. Upon seeing &lt;a href="https://youtu.be/nrVIlhtoE3Y?t=1h17m3s">this slide&lt;/a>:&lt;/p>&lt;p>&lt;img src="https://blog.tamir.dev/images/state-machine-kevlin-henney.png" alt="">&lt;/p>&lt;p>I thought - bare functions instead of the State design pattern? I have to try that! So I went ahead and wrote my code, iterating through the steps described above.At a quick glance, the functor solution may seem satisfying. But in effect functors, unlike functions, have different types and cannot be assigned to the same variable. To bridge the gap, we use an abstract base-class and polymorphism. Once we do that, we are forced to use pointers to hold the states. I use &lt;code>std::unique_ptr&lt;/code> as I don&amp;rsquo;t want to manage the memory myself.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-C++" data-lang="C++">&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;memory&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">IState&lt;/span> { &lt;span style="color:#66d9ef">virtual&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>unique_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>IState&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">operator&lt;/span>()() &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#f92672">~&lt;/span>IState() {};};&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">A&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> IState { std&lt;span style="color:#f92672">::&lt;/span>unique_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>IState&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">operator&lt;/span>()(); };&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">B&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> IState { std&lt;span style="color:#f92672">::&lt;/span>unique_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>IState&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">operator&lt;/span>()(); };std&lt;span style="color:#f92672">::&lt;/span>unique_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>IState&lt;span style="color:#f92672">&amp;gt;&lt;/span> A&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">operator&lt;/span>()() { &lt;span style="color:#66d9ef">return&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>make_unique&lt;span style="color:#f92672">&amp;lt;&lt;/span>B&lt;span style="color:#f92672">&amp;gt;&lt;/span>(); }std&lt;span style="color:#f92672">::&lt;/span>unique_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>IState&lt;span style="color:#f92672">&amp;gt;&lt;/span> B&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">operator&lt;/span>()() { &lt;span style="color:#66d9ef">return&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>make_unique&lt;span style="color:#f92672">&amp;lt;&lt;/span>A&lt;span style="color:#f92672">&amp;gt;&lt;/span>(); }&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() { std&lt;span style="color:#f92672">::&lt;/span>unique_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>IState&lt;span style="color:#f92672">&amp;gt;&lt;/span> state &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>make_unique&lt;span style="color:#f92672">&amp;lt;&lt;/span>A&lt;span style="color:#f92672">&amp;gt;&lt;/span>(); &lt;span style="color:#66d9ef">while&lt;/span> (true) { state &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>state)(); } &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;}&lt;/code>&lt;/pre>&lt;/div>&lt;p>The proxy-object trick, however, has no such overhead. We know that we are using objects, but the code does not show it. The compiled version is far simpler as well (see &lt;a href="https://godbolt.org/g/RoIt28">here&lt;/a> and &lt;a href="https://godbolt.org/g/lXJpb8">here&lt;/a>).&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-C++" data-lang="C++">&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">State&lt;/span> { &lt;span style="color:#66d9ef">using&lt;/span> FuncType &lt;span style="color:#f92672">=&lt;/span> State(&lt;span style="color:#f92672">*&lt;/span>)(); State(FuncType func) &lt;span style="color:#f92672">:&lt;/span> _func{func} {}; State &lt;span style="color:#a6e22e">operator&lt;/span>()() { &lt;span style="color:#66d9ef">return&lt;/span> _func(); } FuncType _func;};State &lt;span style="color:#a6e22e">A&lt;/span>();State &lt;span style="color:#a6e22e">B&lt;/span>();State &lt;span style="color:#a6e22e">A&lt;/span>() { &lt;span style="color:#66d9ef">return&lt;/span> B; }State &lt;span style="color:#a6e22e">B&lt;/span>() { &lt;span style="color:#66d9ef">return&lt;/span> A; }&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() { State state &lt;span style="color:#f92672">=&lt;/span> A; &lt;span style="color:#66d9ef">while&lt;/span> (true) { state &lt;span style="color:#f92672">=&lt;/span> state(); } &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;}&lt;/code>&lt;/pre>&lt;/div>&lt;p>Enhancing it a bit, to handle events and operate on a context, we still maintain very simple, straight-forward code. For the purpose of this example, &lt;code>abort()&lt;/code> and &lt;code>printf()&lt;/code> are used instead of &lt;code>throw std::runtime_error&lt;/code> and &lt;code>std::cout&lt;/code> because the compiled output is easier to read. See compilation &lt;a href="https://godbolt.org/g/LcAsfU">here&lt;/a> and execution &lt;a href="http://coliru.stacked-crooked.com/a/64b54b8c5282ac23">here&lt;/a>.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-C++" data-lang="C++">&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cstdio&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cstdlib&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Event&lt;/span>{ A, B, };&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Context&lt;/span> { &lt;span style="color:#66d9ef">int&lt;/span> counter &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;};&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">State&lt;/span> { &lt;span style="color:#66d9ef">using&lt;/span> FuncType &lt;span style="color:#f92672">=&lt;/span> State(&lt;span style="color:#f92672">*&lt;/span>)(Context&lt;span style="color:#f92672">&amp;amp;&lt;/span>, Event); State(FuncType func) &lt;span style="color:#f92672">:&lt;/span> _func{func} {}; State &lt;span style="color:#a6e22e">operator&lt;/span>()(Context&lt;span style="color:#f92672">&amp;amp;&lt;/span> ctx, Event evt) { &lt;span style="color:#66d9ef">return&lt;/span> _func(ctx, evt); } FuncType _func;};State &lt;span style="color:#a6e22e">A&lt;/span>(Context&lt;span style="color:#f92672">&amp;amp;&lt;/span>, Event);State &lt;span style="color:#a6e22e">B&lt;/span>(Context&lt;span style="color:#f92672">&amp;amp;&lt;/span>, Event);State &lt;span style="color:#a6e22e">A&lt;/span>(Context&lt;span style="color:#f92672">&amp;amp;&lt;/span> ctx, Event evt) { printf(&lt;span style="color:#e6db74">&amp;#34;State A, counter = %d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, ctx.counter); &lt;span style="color:#f92672">++&lt;/span>ctx.counter; &lt;span style="color:#66d9ef">switch&lt;/span> (evt) { &lt;span style="color:#66d9ef">case&lt;/span> Event&lt;span style="color:#f92672">::&lt;/span>A : &lt;span style="color:#66d9ef">return&lt;/span> A; &lt;span style="color:#66d9ef">case&lt;/span> Event&lt;span style="color:#f92672">::&lt;/span>B : &lt;span style="color:#66d9ef">return&lt;/span> B; &lt;span style="color:#66d9ef">default&lt;/span>&lt;span style="color:#f92672">:&lt;/span> abort(); }}State &lt;span style="color:#a6e22e">B&lt;/span>(Context&lt;span style="color:#f92672">&amp;amp;&lt;/span> ctx, Event evt) { printf(&lt;span style="color:#e6db74">&amp;#34;State B, counter = %d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, ctx.counter); &lt;span style="color:#f92672">++&lt;/span>ctx.counter; &lt;span style="color:#66d9ef">switch&lt;/span> (evt) { &lt;span style="color:#66d9ef">case&lt;/span> Event&lt;span style="color:#f92672">::&lt;/span>A : &lt;span style="color:#66d9ef">return&lt;/span> A; &lt;span style="color:#66d9ef">case&lt;/span> Event&lt;span style="color:#f92672">::&lt;/span>B : &lt;span style="color:#66d9ef">return&lt;/span> B; &lt;span style="color:#66d9ef">default&lt;/span>&lt;span style="color:#f92672">:&lt;/span> abort(); }}&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() { State state &lt;span style="color:#f92672">=&lt;/span> A; Context ctx{}; Event events[] &lt;span style="color:#f92672">=&lt;/span> {Event&lt;span style="color:#f92672">::&lt;/span>B, Event&lt;span style="color:#f92672">::&lt;/span>A, Event&lt;span style="color:#f92672">::&lt;/span>B, Event&lt;span style="color:#f92672">::&lt;/span>A, }; &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">auto&lt;/span> evt : events) { state &lt;span style="color:#f92672">=&lt;/span> state(ctx, evt); } &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;}&lt;/code>&lt;/pre>&lt;/div>&lt;p>For those keen on functional programming, we can even pass in a const reference to the context, and return a new context along with the new state. &lt;a href="https://godbolt.org/g/Dd1XKr">Compilation&lt;/a>, &lt;a href="http://coliru.stacked-crooked.com/a/e7ef3a7ab08e0e88">execution&lt;/a>.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-C++" data-lang="C++">&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;tuple&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cstdio&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cstdlib&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Event&lt;/span>{ A, B, };&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Context&lt;/span> { Context &lt;span style="color:#a6e22e">Inc&lt;/span>() &lt;span style="color:#66d9ef">const&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> Context{counter &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>}; } &lt;span style="color:#66d9ef">int&lt;/span> counter &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;};&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">State&lt;/span> { &lt;span style="color:#66d9ef">using&lt;/span> RetType &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>pair&lt;span style="color:#f92672">&amp;lt;&lt;/span>State, &lt;span style="color:#66d9ef">const&lt;/span> Context&lt;span style="color:#f92672">&amp;gt;&lt;/span>; &lt;span style="color:#66d9ef">using&lt;/span> FuncType &lt;span style="color:#f92672">=&lt;/span> RetType(&lt;span style="color:#f92672">*&lt;/span>)(&lt;span style="color:#66d9ef">const&lt;/span> Context&lt;span style="color:#f92672">&amp;amp;&lt;/span>, Event); State(FuncType func) &lt;span style="color:#f92672">:&lt;/span> _func{func} {}; RetType &lt;span style="color:#a6e22e">operator&lt;/span>()(Context&lt;span style="color:#f92672">&amp;amp;&lt;/span> ctx, Event evt) { &lt;span style="color:#66d9ef">return&lt;/span> _func(ctx, evt); } FuncType _func;};State&lt;span style="color:#f92672">::&lt;/span>RetType A(&lt;span style="color:#66d9ef">const&lt;/span> Context&lt;span style="color:#f92672">&amp;amp;&lt;/span>, Event);State&lt;span style="color:#f92672">::&lt;/span>RetType B(&lt;span style="color:#66d9ef">const&lt;/span> Context&lt;span style="color:#f92672">&amp;amp;&lt;/span>, Event);State&lt;span style="color:#f92672">::&lt;/span>RetType A(&lt;span style="color:#66d9ef">const&lt;/span> Context&lt;span style="color:#f92672">&amp;amp;&lt;/span> ctx, Event evt) { printf(&lt;span style="color:#e6db74">&amp;#34;State A, counter = %d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, ctx.counter); &lt;span style="color:#66d9ef">switch&lt;/span> (evt) { &lt;span style="color:#66d9ef">case&lt;/span> Event&lt;span style="color:#f92672">::&lt;/span>A : &lt;span style="color:#66d9ef">return&lt;/span> {A, ctx}; &lt;span style="color:#66d9ef">case&lt;/span> Event&lt;span style="color:#f92672">::&lt;/span>B : &lt;span style="color:#66d9ef">return&lt;/span> {B, ctx.Inc()}; &lt;span style="color:#66d9ef">default&lt;/span>&lt;span style="color:#f92672">:&lt;/span> abort(); }}State&lt;span style="color:#f92672">::&lt;/span>RetType B(&lt;span style="color:#66d9ef">const&lt;/span> Context&lt;span style="color:#f92672">&amp;amp;&lt;/span> ctx, Event evt) { printf(&lt;span style="color:#e6db74">&amp;#34;State B, counter = %d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, ctx.counter); &lt;span style="color:#66d9ef">switch&lt;/span> (evt) { &lt;span style="color:#66d9ef">case&lt;/span> Event&lt;span style="color:#f92672">::&lt;/span>A : &lt;span style="color:#66d9ef">return&lt;/span> {A, ctx.Inc()}; &lt;span style="color:#66d9ef">case&lt;/span> Event&lt;span style="color:#f92672">::&lt;/span>B : &lt;span style="color:#66d9ef">return&lt;/span> {B, ctx}; &lt;span style="color:#66d9ef">default&lt;/span>&lt;span style="color:#f92672">:&lt;/span> abort(); }}&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() { State state &lt;span style="color:#f92672">=&lt;/span> A; Context ctx{}; Event events[] &lt;span style="color:#f92672">=&lt;/span> {Event&lt;span style="color:#f92672">::&lt;/span>B, Event&lt;span style="color:#f92672">::&lt;/span>A, Event&lt;span style="color:#f92672">::&lt;/span>B, Event&lt;span style="color:#f92672">::&lt;/span>A, }; &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">auto&lt;/span> evt : events) { std&lt;span style="color:#f92672">::&lt;/span>tie(state, ctx) &lt;span style="color:#f92672">=&lt;/span> state(ctx, evt); } &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;}&lt;/code>&lt;/pre>&lt;/div>&lt;p>And that&amp;rsquo;s it. We have a state machine based on pure-, bare-functions, in C++. It has a nice, simple look to it and as we&amp;rsquo;ve seen, compiles into far simpler code than the alternatives. On the way, we&amp;rsquo;ve also learned a bit about C++&amp;rsquo;s type system and how to use objects to overcome its limitations.In the &lt;a href="https://blog.tamir.dev/posts/a-functional-style-state-machine-in-cpp-part-2">next post&lt;/a> (&lt;del>&lt;em>soon to be populated&lt;/em>&lt;/del> &lt;em>now online!&lt;/em>) I will show some exciting (read: never use in production) dark template magic to both generalize the &lt;code>State&lt;/code> object and to get some compile-time guarantees. Stay tuned!&lt;/p></description></item><item><title>The Windows CLI sucks, and that's good.</title><link>https://blog.tamir.dev/posts/the-windows-cli-sucks-and-thats-good/</link><pubDate>Mon, 01 May 2017 00:00:00 +0000</pubDate><guid>https://blog.tamir.dev/posts/the-windows-cli-sucks-and-thats-good/</guid><description>&lt;h2 id="tldr">TL;DR&lt;/h2>&lt;p>Windows' shell sucks so people write tools. Tools are fun to use.&lt;/p>&lt;p>Linux&amp;rsquo;s shell is amazing so people write terrible bash scripts and makefiles.&lt;/p>&lt;p>Be sensible. Use Python. Use C.&lt;/p>&lt;p>The rest of the post is me ranting, letting off some steam. Have fun, and don&amp;rsquo;t take it too seriously.&lt;/p>&lt;h2 id="-a-story-of-shells-">🐢 A Story of Shells 🐢&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">my_var&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>application arg0 arg1&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#66d9ef">for&lt;/span> /f %%i in &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#39;application arg0 arg1&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span> set my_var&lt;span style="color:#f92672">=&lt;/span>%%i&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="-windows-">🪟 Windows 🪟&lt;/h3>&lt;p>I&amp;rsquo;ve been a Windows user for a very long time. In fact, it has always been my main OS. And I absolutely love it. That is not to say, though, that there aren&amp;rsquo;t issues with that. One such thing is the CLI.&lt;/p>&lt;p>For years, the only thing we had on Windows was &lt;code>cmd.exe&lt;/code> and &lt;code>.bat&lt;/code> files. And they are ghastly. They are pretty straight-forward for very simple things, but try using them for anything more advanced (like &lt;a href="http://stackoverflow.com/questions/2323292/windows-batch-assign-output-of-a-program-to-a-variable">setting a variable to the output of a command&lt;/a>) and you&amp;rsquo;ll quickly realize that this is not the tool for you. You need a &lt;em>real&lt;/em> programming language. So you&amp;rsquo;ll use Python, or C, or something.It will take you a bit longer to write the tool you needed, but in the process it will become an actual tool and not an annoying script.&lt;/p>&lt;p>In recent years there has been some serious improvements - PowerShell came along, &lt;a href="http://cmder.net/">cmder&lt;/a> made the shell look a bit better, and I have some Linux tools (grep, awk, xargs&amp;hellip;) running in my Windows shell. And yet, people tend to use more general purpose languages on Windows.&lt;/p>&lt;h3 id="-penguins-">🐧 Penguins 🐧&lt;/h3>&lt;p>On Linux, however, things have always been good with the shell. It has awesome terminals, and a huge amount of utilities that can be chained (piped) to unleash powers beyond imagination. And unlike Windows, where you need to use funny-looking APIs to get information, Linux just gives you everything in handy text files.&lt;/p>&lt;p>In fact, Linux is optimized for the shell in ways that make me wince. It is actually easier to parse system information (like, say, a process list) in the shell than in C code. Because instead of proper APIs, we have text files. &lt;em>Text&lt;/em> files. The kernel takes binary data, formats it into strings, and the user-mode code can then &lt;code>scanf&lt;/code> the code back into binary data. Amazing!&lt;/p>&lt;p>But enough of that.&lt;/p>&lt;p>The Linux shell is truly remarkable. You can do pretty much anything in a bash script. And people do.Now, there&amp;rsquo;s a bit of Linux philosophy that I really like. &amp;ldquo;Do one thing and do it well.&amp;rdquo; &lt;code>find&lt;/code> finds things, &lt;code>grep&lt;/code> greps, &lt;code>xargs&lt;/code> xargs, and &lt;code>awk&lt;/code> awks. So far - so good. But what about bash itself?While each of the shell utilities does one thing and does it well, bash, and especially bash scripts, do not. They allow you to quickly implement advanced behaviours by hacking together multiple commands. You write more and more and more, and everything just works. And then, it doesn&amp;rsquo;t. And you need to fix it. If you&amp;rsquo;re lucky, and the code is well documented you might get away with that. But more often than not, it won&amp;rsquo;t be. And the wonderful &amp;ldquo;let&amp;rsquo;s take strings and pass them around&amp;rdquo; programming style might come back to bite you.&lt;/p>&lt;p>But, again, bash is fantastic for quick hacks. And works fairly well in general when you&amp;rsquo;re not taking input parameters, and when it&amp;rsquo;s small enough. I don&amp;rsquo;t like it, but it works.&lt;/p>&lt;h2 id="-make-your-own-hell-">🔥 Make Your Own Hell 🔥&lt;/h2>&lt;p>The real issue is &lt;code>make&lt;/code>.&lt;/p>&lt;p>&lt;code>make&lt;/code> is a beast spawned in the deepest dungeons of hell (and I am awfully sorry if I offended any such beast by the comparison.)Makefiles give you the benefits of never leaving your shell / code-editor while you work. You just create a makefile, define your targets, and you&amp;rsquo;re good to go. In truth - that is fantastic. You can even include bash scripts in your makefiles to do custom steps. Or generate makefiles. Or use &lt;code>automake&lt;/code>. Or anything else that might make the task of writing makefiles easier to do and harder to maintain. But you write, and you specify, and it just works! Most of the time.&lt;/p>&lt;p>** &lt;strong>Dramatic Pause&lt;/strong> **&lt;/p>&lt;p>You might have noticed I don&amp;rsquo;t like &lt;code>make&lt;/code>. That&amp;rsquo;s true. This post is mainly me complaining about &lt;code>make&lt;/code> and blowing off some steam. Now, I appreciate &lt;code>make&lt;/code>. I&amp;rsquo;ve used it to build things that I never would&amp;rsquo;ve managed on Windows. It&amp;rsquo;s an extremely powerful tool. But, you see, as a Windows user, I naturally enjoy IDEs. One such wonderful creation is Visual Studio. As far as C/C++ development tools go it is unparalleled. &amp;ldquo;But wait!&amp;rdquo; say my Linux friends, &amp;ldquo;VS forces you to create foul &amp;lsquo;projects&amp;rsquo; using their fiendish &amp;lsquo;GUI&amp;rsquo;! In Linux, we just write makefiles!&amp;rdquo;That is true, and it is quite annoying with small projects (where I usually end up having a &lt;code>.bat&lt;/code> file to trigger the build with all the relevant flags,) but it is godsend for anything more complex. You have GUI, and Projects, and Solutions and whatnot. It&amp;rsquo;s great. A bit slow to define, but oh so easy to use!&lt;/p>&lt;p>And now, after I lost most of my Linux-oriented readers, I can get to the point. Linux has a super-powerful shell, so people use it to make a super-powerful mess. Windows has a super-useless shell, so people don&amp;rsquo;t use it. Instead - they build tools! User-friendly(-ish) tools with GUI. And they use general purpose programming languages. And that&amp;rsquo;s good.&lt;/p>&lt;h2 id="-takeaway-">🍕 Takeaway 🍕&lt;/h2>&lt;p>Should you stop using bash? Or cripple it? Or keep Windows' shell down? Hell no!&lt;/p>&lt;p>Use whatever tools you deem fit. But use them wisely. Keep shell-scripting to small automation tasks, and try to use more maintainable programming languages when you write something larger or more complex. And do write new tools. Tools are fun.&lt;/p></description></item><item><title>Don't Amend, Fix</title><link>https://blog.tamir.dev/posts/dont-amend-fix/</link><pubDate>Fri, 10 Mar 2017 00:00:00 +0000</pubDate><guid>https://blog.tamir.dev/posts/dont-amend-fix/</guid><description>&lt;p>As git users, we know that we should &amp;ldquo;commit early, commit often.&amp;rdquo; While this is a wonderful thing to do, it does mean that from time to time we make a mistake and need to fix a commit. Maybe we forget to &lt;code>git add&lt;/code> a new file, or missed a typo. So we go ahead and &lt;code>git commit --amend&lt;/code>. Problem solved. Great.&lt;/p>&lt;p>But personally, I hate it.&lt;/p>&lt;p>For one thing, amending commits hides history. Once you amend, that past state is gone before you can properly test the new one. True, you can also restore it via &lt;code>git reflog&lt;/code>, but no-one really likes using that. It should be a last resort.&lt;/p>&lt;p>For another thing, amending is very limited. Say I am writing some C code. I write my first module, add it and commit.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git add FirstModule.hgit commit -m &lt;span style="color:#e6db74">&amp;#34;Added FirstModule&amp;#34;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I write my second module, and add it as well.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git add SecondModule.h SecondModule.cgit commit -m &lt;span style="color:#e6db74">&amp;#34;Added SecondModule&amp;#34;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And now, after adding that second commit, I realize that I forgot to commit &lt;code>FirstModule.c&lt;/code>. &lt;code>git commit --amend&lt;/code> to the rescue? Not really. I now have to resort to the black, frightening voodoo magic called &lt;code>git rebase&lt;/code>.&lt;/p>&lt;p>First, we commit the forgotten module&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git add FirstModule.cgit commit -m &lt;span style="color:#e6db74">&amp;#34;Added FirstModule.c, forgotten eariler.&amp;#34;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And then rebase - &lt;code>git rebase -i HEAD~3&lt;/code>&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">pick 1db8687 Added FirstModulepick 336941b Added SecondModulepick 7884909 Added FirstModule.c, forgotten eariler.&lt;/code>&lt;/pre>&lt;/div>&lt;p>Change to&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">pick 1db8687 Added FirstModulefixup 7884909 Added FirstModule.c, forgotten eariler.pick 336941b Added SecondModule&lt;/code>&lt;/pre>&lt;/div>&lt;p>Save &amp;amp; Quit, and we&amp;rsquo;re done.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">* 1946e37d105ffebcbd91bb958f8a2fce6160c761 (HEAD -&amp;gt; master) Added SecondModule| create mode 100644 SecondModule.c| create mode 100644 SecondModule.h* 8ffbb9f2915e060a6c4771e13f5a82442743724c Added FirstModule| create mode 100644 FirstModule.c| create mode 100644 FirstModule.h* 815e7bab6ee1fa5bf1df10f5705919b48cbe214c First Commit&lt;/code>&lt;/pre>&lt;/div>&lt;p>Not that hard, is it?&lt;/p>&lt;p>But still, moving between amending and rebasing can be cumbersome. Especially as most of the time there is no real need to rebase and it&amp;rsquo;s easy to forget the process. Enter &lt;code>git commit --fixup&lt;/code> (or &lt;code>--squash&lt;/code>) and &lt;code>git rebase -i --autosquash&lt;/code>.&lt;/p>&lt;p>These commands save us the work of reordering the commits and changing from &lt;code>pick&lt;/code> to &lt;code>fixup&lt;/code> or &lt;code>squash&lt;/code>. Making our rebasing work a lot easier.&lt;/p>&lt;p>I like defining the following aliases:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ini" data-lang="ini">&lt;span style="color:#66d9ef">[alias]&lt;/span> &lt;span style="color:#a6e22e">ri&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">rebase -i --autosquash&lt;/span>&lt;span style="color:#e6db74"> mri = rebase -i&lt;/span>&lt;span style="color:#e6db74"> fix = commit --fixup&lt;/span>&lt;span style="color:#e6db74"> squ = commit --squash&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Using those aliases, the rebasing we did earlier would work as follows:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git add FirstModule.cgit fix HEAD~1git ri HEAD~3&lt;/code>&lt;/pre>&lt;/div>&lt;p>We&amp;rsquo;d get the following rebase automatically&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">pick 1db8687 Added FirstModulefixup 50a3650 fixup! Added FirstModulepick 336941b Added SecondModule&lt;/code>&lt;/pre>&lt;/div>&lt;p>Exit the editor, and be done with it.&lt;/p>&lt;p>We can use &lt;code>fix&lt;/code> as many times as we want (just go ahead and &lt;code>git fix HEAD -a&lt;/code>) before the rebase. Our log may look funny&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">* fe0c2a0 (HEAD -&amp;gt; master) fixup! fixup! fixup! fixup! Added SecondModule* a53cd32 fixup! fixup! fixup! Added SecondModule* 9c19f2d fixup! fixup! Added SecondModule* b758a53 fixup! Added SecondModule* 902d65e Added SecondModule* 67f1260 Added FirstModule* 815e7ba First Commit&lt;/code>&lt;/pre>&lt;/div>&lt;p>But the rebase doesn&amp;rsquo;t care&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">pick 902d65e Added SecondModulefixup b758a53 fixup! Added SecondModulefixup 9c19f2d fixup! fixup! Added SecondModulefixup a53cd32 fixup! fixup! fixup! Added SecondModulefixup fe0c2a0 fixup! fixup! fixup! fixup! Added SecondModule&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="conclusion">Conclusion&lt;/h2>&lt;p>Stop using &lt;code>git commit --amend&lt;/code> and start using &lt;code>git fix&lt;/code> (&lt;code>git commit --fixup&lt;/code>) instead. It is a no-fear, low-overhead alternative, and it far more flexible.Here are the aliases again, in case you want them:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ini" data-lang="ini">&lt;span style="color:#66d9ef">[alias]&lt;/span> &lt;span style="color:#a6e22e">ri&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">rebase -i --autosquash&lt;/span>&lt;span style="color:#e6db74"> mri = rebase -i&lt;/span>&lt;span style="color:#e6db74"> fix = commit --fixup&lt;/span>&lt;span style="color:#e6db74"> squ = commit --squash&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>